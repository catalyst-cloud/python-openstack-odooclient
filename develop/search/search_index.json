{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"OpenStack Odoo Client Library for Python","text":"<p>This is an Odoo client library for Python with support for the OpenStack Integration add-on, intended to be used by OpenStack projects such as Distil.</p> <p>This library provides a higher level interface than OdooRPC (which is used internally), and is intended to make it possible to develop applications against a well-defined API, without having to take into account considerations such as backward-incompatible changes between Odoo versions.</p>"},{"location":"index.html#installation","title":"Installation","text":"<p>The OpenStack Odoo Client library supports Python 3.8 and later.</p> <p>To install the library package, simply install the <code>openstack-odooclient</code> package using <code>pip</code>.</p> <pre><code>python -m pip install openstack-odooclient\n</code></pre>"},{"location":"index.html#connecting-to-odoo","title":"Connecting to Odoo","text":"<p>To connect to an Odoo server, create an <code>openstack_odooclient.Client</code> object and pass the connection details to it.</p> <pre><code>openstack_odooclient.Client(\n    *,\n    hostname: str,\n    database: str,\n    username: str,\n    password: str,\n    protocol: str = \"jsonrpc\",\n    port: int = 8069,\n    verify: bool | str | Path = True,\n    version: str | None = None,\n) -&gt; Client\n</code></pre> <p>This is the recommended way of creating the Odoo client object, as it provides some extra parameters for convenience.</p> <pre><code>from openstack_odooclient import Client as OdooClient\n\nodoo_client = OdooClient(\n    hostname=\"localhost\",\n    database=\"odoodb\",\n    user=\"test-user\",\n    password=\"&lt;password&gt;\",\n    protocol=\"jsonrpc\",  # HTTP, or \"jsonrpc+ssl\" for HTTPS.\n    port=8069,\n    # verify=True,  # Enable/disable SSL verification, or pass the path to a CA certificate.\n    # version=\"14.0\",  # Optionally specify the server version. Default is to auto-detect.\n)\n</code></pre> <p>If you have a pre-existing <code>odoorpc.ODOO</code> connection object, that can instead be passed directly into <code>openstack_odooclient.Client</code>.</p> <pre><code>openstack_odooclient.Client(*, odoo: odoorpc.ODOO) -&gt; Client\n</code></pre> <p>This allows for sharing a single OdooRPC connection object with other code.</p> <pre><code>from odoorpc import ODOO\nfrom openstack_odooclient import Client as OdooClient\n\nodoo = ODOO(\n    host=\"localhost\",\n    port=8069,\n    protocol=\"jsonrpc\",  # HTTP, or \"jsonrpc+ssl\" for HTTPS.\n    # version=\"14.0\",  # Optionally specify the server version. Default is to auto-detect.\n)\nodoo.login(\"odoodb\", \"test-user\", \"&lt;password&gt;\")\n\nodoo_client = OdooClient(odoo=odoo)\n</code></pre>"},{"location":"index.html#managers","title":"Managers","text":"<p>The Odoo client object exposes a number of record managers, which contain methods used to query specific record types, or create one or more new records of that type.</p> <p>For example, performing a simple search query would look something like this:</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.users.search([(\"id\", \"=\", odoo_client.user_id)], as_id=True)\n[1234]\n</code></pre> <p>For more information on the available managers and their functions, see Managers.</p>"},{"location":"index.html#records","title":"Records","text":"<p>Record manager methods return record objects for the corresponding model in Odoo.</p> <p>Record fields can be accessed as attributes on these record objects. The record classes are fully type hinted, allowing IDEs and validation tools such as Mypy to verify that your application is using the fields correctly.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient, User\n&gt;&gt;&gt; user: User | None = None\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; user = odoo_client.users.get(1234)\n&gt;&gt;&gt; user\nUser(record={'id': 1234, ...}, fields=None)\n&gt;&gt;&gt; user.id\n1234\n</code></pre> <p>For more information on record objects, see Records.</p>"},{"location":"changelog.html","title":"Changelog","text":""},{"location":"changelog.html#010-2024-06-27","title":"0.1.0 - 2024-06-27","text":""},{"location":"changelog.html#added","title":"Added","text":"<ul> <li>Create the OpenStack Odoo Client Library for Python (#1)</li> </ul>"},{"location":"performance.html","title":"Performance Considerations","text":"<p>The OpenStack Odoo Client library uses OdooRPC to communicate with Odoo. OdooRPC performs synchronous RPC requests, some of which can take a long time to execute depending on what work is being done.</p> <p>Optimising performance when interfacing with Odoo mostly revolves around minimising the number of requests, and reducing the amount of data selected to the minimum necessary. The OpenStack Odoo Client library offers a few ways of doing this.</p>"},{"location":"performance.html#selecting-fields","title":"Selecting Fields","text":"<p>By default, all fields on a record are selected when performing queries.</p> <p>When querying a lot of records this can mean a lot more data is being selected, serialised and deserialised than necessary, causing requests to take longer than they need to.</p> <pre><code>&gt;&gt;&gt; from datetime import datetime\n&gt;&gt;&gt; from openstack_odooclient import Client\n&gt;&gt;&gt; odoo_client = Client(...)\n&gt;&gt;&gt; before_dt = datetime.now()\n&gt;&gt;&gt; odoo_client.products.get_sellable_company_products(1234)\n&gt;&gt;&gt; print(f\"{(datetime.now() - before_dt).total_seconds():.1f} seconds\")\n2.1 seconds\n</code></pre> <p>If requests are taking longer than expected, try using the <code>fields</code> parameter on the query method to limit the selected field to only the fields required for the task.</p> <pre><code>&gt;&gt;&gt; from datetime import datetime\n&gt;&gt;&gt; from openstack_odooclient import Client\n&gt;&gt;&gt; odoo_client = Client(...)\n&gt;&gt;&gt; before_dt = datetime.now()\n&gt;&gt;&gt; odoo_client.products.get_sellable_company_products(1234, fields={\"name\", \"default_code\"})\n&gt;&gt;&gt; print(f\"{(datetime.now() - before_dt).total_seconds():.1f} seconds\")\n0.4 seconds\n</code></pre> <p>You can also query only the record IDs using the <code>as_id</code> parameter on the query method. This eliminates the step where the record contents are fetched, improving performance further, but means that you will need to make another query to fetch the contents of records when required.</p> <pre><code>&gt;&gt;&gt; from datetime import datetime\n&gt;&gt;&gt; from openstack_odooclient import Client\n&gt;&gt;&gt; odoo_client = Client(...)\n&gt;&gt;&gt; before_dt = datetime.now()\n&gt;&gt;&gt; odoo_client.products.get_sellable_company_products(1234, as_id=True)\n&gt;&gt;&gt; print(f\"{(datetime.now() - before_dt).total_seconds():.1f} seconds\")\n0.2 seconds\n</code></pre>"},{"location":"performance.html#clustering-queries","title":"Clustering Queries","text":"<p>The Odoo Client library provides nested model references on record objects, which makes it easier to interface with Odoo records in a more Pythonic manner.</p> <p>However, using them results in the application making a number of smaller requests to Odoo to retrieve records, which is not very efficient. Depending on the use case, other ways of querying records are preferable.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client\n&gt;&gt;&gt; odoo_client = Client(...)\n&gt;&gt;&gt; invoice = odoo_client.account_moves.get(1234)\n&gt;&gt;&gt; for invoice_line in invoice.invoice_lines:\n...     print(\n...         (\n...             f\"{invoice_line.name}\"\n...             f\"- {invoice_line.product.name}\"\n...             f\" - {invoice_line.quantity} {invoice_line.product.default_code}\"\n...             f\" - {invoice.price_subtotal}\"\n...         ),\n...     )\n...\ntest-instance-1 - m1.small - 1.0 hour - 0.012\ntest-instance - m1.small - 744.0 hour - 8.928\n</code></pre> <p>In the above example, <code>invoice_line.product</code>, which is a product model ref within an account move (invoice) line, would be individually queried for each invoice line in the loop, increasing the runtime of the task.</p> <p>Some record types, such as products as shown above, are commonly referenced in relationships in a number of other record types. For these record types, it is usually more efficient to fetch all of them in a single dedicated query, save the resulting objects, and reference the objects using the record's IDs.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client\n&gt;&gt;&gt; odoo_client = Client(...)\n&gt;&gt;&gt; products = {\n...     p.id: p\n...     for p in odoo_client.products.get_sellable_company_products(\n...         company=5678,\n...     )\n... }\n&gt;&gt;&gt; invoice = odoo_client.account_moves.get(1234)\n&gt;&gt;&gt; for invoice_line in invoice.invoice_lines:\n...     product = products[invoice_line.product_id]\n...     print(\n...         (\n...             f\"{invoice_line.name}\"\n...             f\"- {product.name}\"\n...             f\" - {invoice_line.quantity} {product.default_code}\"\n...             f\" - {invoice.price_subtotal}\"\n...         ),\n...     )\n...\ntest-instance-1 - m1.small - 1.0 hour - 0.012\ntest-instance - m1.small - 744.0 hour - 8.928\n</code></pre>"},{"location":"performance.html#creating-records","title":"Creating Records","text":"<p>In many cases multiple records need to be created that have a relationship with each other.</p> <p>In the below example an empty sale order is created, with a sale order line then being created and linked to that sale order. Since a sale order can have multiple sale order lines, creating sale orders this way can be inefficient.</p> <pre><code>&gt;&gt;&gt; from datetime import date\n&gt;&gt;&gt; from openstack_odooclient import Client\n&gt;&gt;&gt; odoo_client = Client(...)\n&gt;&gt;&gt; order = odoo_client.sales_orders.create(\n...     user=5678,\n...     partner=9012,\n...     os_invoice_date=date(2024, 6, 30),\n...     os_invoice_due_date=date(2024, 7, 20),\n...     os_project=3456,\n...     order_lines=[],\n... )\n&gt;&gt;&gt; odoo_client.sale_order_lines.create(\n...     name=\"test-instance\",\n...     product=7890,\n...     product_uom=123456,\n...     product_uom_qty=1.0,\n...     price_unit=0.05,\n...     os_project=3456,\n...     os_resource_id=\"1a2b3c4d5e1a2b3c4d5e1a2b3c4d5e1a\",\n...     os_region=\"RegionOne\",\n...     os_resource_type=\"Virtual Machine\",\n...     os_resource_name=\"m1.small\",\n...     order=order,\n... )\n789012\n</code></pre> <p>If the contents of the sale order lines are known before the sale order is created, this can be optimised by nesting the sale order lines within the <code>create</code> method call for the sale order itself, as shown below.</p> <p>All of the child records will be created and linked to the parent record, in a single request.</p> <pre><code>&gt;&gt;&gt; from datetime import date\n&gt;&gt;&gt; from openstack_odooclient import Client\n&gt;&gt;&gt; odoo_client = Client(...)\n&gt;&gt;&gt; odoo_client.sales_orders.create(\n...     user=5678,\n...     partner=9012,\n...     os_invoice_date=date(2024, 6, 30),\n...     os_invoice_due_date=date(2024, 7, 20),\n...     os_project=3456,\n...     order_lines=[\n...         {\n...             \"name\": \"test-instance\",\n...             \"product\": 7890,\n...             \"product_uom\": 123456,\n...             \"product_uom_qty\": 1.0,\n...             \"price_unit\": 0.05,\n...             \"os_project\": 3456,\n...             \"os_resource_id\": \"1a2b3c4d5e1a2b3c4d5e1a2b3c4d5e1a\",\n...             \"os_region\": \"RegionOne\",\n...             \"os_resource_type\": \"Virtual Machine\",\n...             \"os_resource_name\": \"m1.small\",\n...         },\n...     ],\n... )\n1234\n</code></pre> <p>This can be done for any record type with a list of references to another record type (a <code>One2many</code> or <code>Many2many</code> relation).</p>"},{"location":"managers/index.html","title":"Managers","text":"<p>The Odoo client object exposes a number of record managers, which contain methods used to query specific record types, or create one or more new records of that type.</p> <p>For example, performing a simple search query would look something like this:</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.users.search([(\"id\", \"=\", odoo_client.user_id)], as_id=True)\n[1234]\n</code></pre>"},{"location":"managers/index.html#available-managers","title":"Available Managers","text":"<ul> <li>Account Moves (Invoices)</li> <li>Account Move (Invoice) Lines</li> <li>Companies</li> <li>OpenStack Credits</li> <li>OpenStack Credit Transactions</li> <li>OpenStack Credit Types</li> <li>Currencies</li> <li>OpenStack Customer Groups</li> <li>OpenStack Grants</li> <li>OpenStack Grant Types</li> <li>Partners</li> <li>Partner Categories</li> <li>Pricelists</li> <li>Products</li> <li>Product Categories</li> <li>OpenStack Projects</li> <li>OpenStack Project Contacts</li> <li>OpenStack Referral Codes</li> <li>OpenStack Resellers</li> <li>OpenStack Reseller Tiers</li> <li>Sale Orders</li> <li>Sale Order Lines</li> <li>OpenStack Support Subscriptions</li> <li>OpenStack Support Subscription Types</li> <li>Taxes</li> <li>Tax Groups</li> <li>OpenStack Term Discounts</li> <li>OpenStack Trials</li> <li>Units of Measure (UoM)</li> <li>Unit of Measure (UoM) Categories</li> <li>Users</li> <li>OpenStack Volume Discount Ranges</li> <li>OpenStack Voucher Codes</li> </ul>"},{"location":"managers/index.html#methods","title":"Methods","text":"<p>All record managers implement the following methods for querying and managing records.</p>"},{"location":"managers/index.html#list","title":"<code>list</code>","text":"<pre><code>list(\n    ids: int | Iterable[int],\n    fields: Iterable[str] | None = None,\n    as_dict: bool = False,\n    optional: bool = False,\n) -&gt; list[Record]\n</code></pre> <pre><code>list(\n    ids: int | Iterable[int],\n    fields: Iterable[str] | None = None,\n    as_dict: bool = True,\n    optional: bool = False,\n) -&gt; list[dict[str, Any]]\n</code></pre> <p>Get one or more specific records by ID.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.users.list(1234)\n[User(record={'id': 1234, ...}, fields=None)]\n&gt;&gt;&gt; odoo_client.users.list([1234, 5678])\n[User(record={'id': 1234, ...}, fields=None), User(record={'id': 5678, ...}, fields=None)]\n</code></pre> <p>By default all fields available on the record model will be selected, but this can be filtered using the <code>fields</code> parameter.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.users.list(1234, fields={\"ids\"})\n[User(record={'id': 1234}, fields=['ids'])]\n</code></pre> <p>Use the <code>as_dict</code> parameter to return records as <code>dict</code> objects, instead of record objects.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.users.list(1234, as_dict=True)\n[{'id': 1234, ...}]\n</code></pre> <p>By default, the method checks that all provided IDs were found and returned (and will raise an error if any are missing), at the cost of a small performance hit.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.users.list(999999)\n...\nopenstack_odooclient.exceptions.RecordNotFoundError: User records with IDs not found: 999999\n</code></pre> <p>To instead return the list of records that were found without raising an error, set <code>optional</code> to <code>True</code>.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.users.list(999999, optional=True)\n[]\n</code></pre> <p>If <code>ids</code> is given an empty iterator, this method returns an empty list.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.users.list([])\n[]\n</code></pre>"},{"location":"managers/index.html#parameters","title":"Parameters","text":"Name Type Description Default <code>ids</code> <code>int | Iterable[int]</code> Record ID, or list of record IDs (required) <code>fields</code> <code>Iterable[str] | None</code> Fields to select (or <code>None</code> to select all fields) <code>None</code> <code>as_dict</code> <code>bool</code> Return records as dictionaries <code>False</code> <code>optional</code> <code>bool</code> Do not raise an error if not all records were found <code>False</code>"},{"location":"managers/index.html#raises","title":"Raises","text":"Type Description <code>RecordNotFoundError</code> If any of the given record IDs were not found (when <code>optional</code> is <code>False</code>)"},{"location":"managers/index.html#returns","title":"Returns","text":"Type Description <code>list[Record]</code> Record objects (when <code>as_dict</code> is <code>False</code>) <code>list[dict[str, Any]]</code> Record dictionaries (when <code>as_dict</code> is <code>True</code>)"},{"location":"managers/index.html#get","title":"<code>get</code>","text":"<pre><code>get(\n    id: int,\n    fields: Iterable[str] | None = None,\n    as_dict: bool = False,\n    optional: bool = False,\n) -&gt; Record\n</code></pre> <pre><code>get(\n    id: int,\n    fields: Iterable[str] | None = None,\n    as_dict: bool = False,\n    optional: bool = True,\n) -&gt; Record | None\n</code></pre> <pre><code>get(\n    id: int,\n    fields: Iterable[str] | None = None,\n    as_dict: bool = True,\n    optional: bool = False,\n) -&gt; dict[str, Any]\n</code></pre> <pre><code>get(\n    id: int,\n    fields: Iterable[str] | None = None,\n    as_dict: bool = True,\n    optional: bool = True,\n) -&gt; dict[str, Any] | None\n</code></pre> <p>Get a single record by ID.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.users.get(1234)\nUser(record={'id': 1234, ...}, fields=None)\n</code></pre> <p>By default all fields available on the record model will be selected, but this can be filtered using the <code>fields</code> parameter.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.users.get(1234, fields={\"ids\"})\nUser(record={'id': 1234}, fields=['ids'])\n</code></pre> <p>Use the <code>as_dict</code> parameter to return the record as a <code>dict</code> object, instead of a record object.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.users.get(1234, as_dict=True)\n{'id': 1234, ...}\n</code></pre>"},{"location":"managers/index.html#parameters_1","title":"Parameters","text":"Name Type Description Default <code>id</code> <code>int</code> Record ID (required) <code>fields</code> <code>Iterable[str] | None</code> Fields to select (or <code>None</code> to select all fields) <code>None</code> <code>as_dict</code> <code>bool</code> Return record as a dictionary <code>False</code> <code>optional</code> <code>bool</code> Return <code>None</code> if not found <code>False</code>"},{"location":"managers/index.html#raises_1","title":"Raises","text":"Type Description <code>RecordNotFoundError</code> If the given record ID does not exist (when <code>optional</code> is <code>False</code>)"},{"location":"managers/index.html#returns_1","title":"Returns","text":"Type Description <code>Record</code> Record object (when <code>as_dict</code> is <code>False</code>) <code>dict[str, Any]</code> Record dictionary (when <code>as_dict</code> is <code>True</code>) <code>None</code> If the record ID does not exist (when <code>optional</code> is <code>True</code>)"},{"location":"managers/index.html#search","title":"<code>search</code>","text":"<pre><code>search(\n    filters: Sequence[Tuple[str, str, Any] | Sequence[Any] | str] | None = None,\n    fields: Iterable[str] | None = None,\n    order: str | None = None,\n    as_id: bool = False,\n    as_dict: bool = False,\n    optional: bool = False,\n) -&gt; list[Record]\n</code></pre> <pre><code>search(\n    filters: Sequence[Tuple[str, str, Any] | Sequence[Any] | str] | None = None,\n    fields: Iterable[str] | None = None,\n    order: str | None = None,\n    as_id: bool = False,\n    as_dict: bool = False,\n    optional: bool = True,\n) -&gt; list[Record] | None\n</code></pre> <pre><code>search(\n    filters: Sequence[Tuple[str, str, Any] | Sequence[Any] | str] | None = None,\n    fields: Iterable[str] | None = None,\n    order: str | None = None,\n    as_id: bool = True,\n    as_dict: bool = False,\n    optional: bool = False,\n) -&gt; list[int]\n</code></pre> <pre><code>search(\n    filters: Sequence[Tuple[str, str, Any] | Sequence[Any] | str] | None = None,\n    fields: Iterable[str] | None = None,\n    order: str | None = None,\n    as_id: bool = True,\n    as_dict: bool = False,\n    optional: bool = True,\n) -&gt; list[int] | None\n</code></pre> <pre><code>search(\n    filters: Sequence[Tuple[str, str, Any] | Sequence[Any] | str] | None = None,\n    fields: Iterable[str] | None = None,\n    order: str | None = None,\n    as_id: bool = False,\n    as_dict: bool = True,\n    optional: bool = False,\n) -&gt; list[dict[str, Any]]\n</code></pre> <pre><code>search(\n    filters: Sequence[Tuple[str, str, Any] | Sequence[Any] | str] | None = None,\n    fields: Iterable[str] | None = None,\n    order: str | None = None,\n    as_id: bool = False,\n    as_dict: bool = True,\n    optional: bool = True,\n) -&gt; list[dict[str, Any]] | None\n</code></pre> <p>Query the ERP for records, optionally defining filters to constrain the search and other parameters, and return the results.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.users.search([(\"id\", \"=\", 1234)])\n[User(record={'id': 1234, ...}, fields=None)]\n</code></pre> <p>Query filters should be defined using the ORM API search domain format.</p> <p>Filters are a sequence of criteria, where each criterion is one of the following types of values:</p> <ul> <li> <p>A 3-tuple or 3-element sequence in <code>(field_name, operator, value)</code>   format, where:</p> <ul> <li><code>field_name</code> (<code>str</code>) is the the name of the field to filter by.</li> <li><code>operator</code> (<code>str</code>) is the comparison operator to use (for more   information on the available operators, check the   ORM API search domain   documentation).</li> <li><code>value</code> (<code>Any</code>) is the value to compare records against.</li> </ul> </li> <li> <p>A logical operator which prefixes the following filter criteria   to form a criteria combination:</p> <ul> <li><code>&amp;</code> is a logical AND. Records only match if both of the   following two criteria match.</li> <li><code>|</code> is a logical OR. Records match if either of the   following two criteria match.</li> <li><code>!</code> is a logical NOT (negation). Records match if the   following one criterion does NOT match.</li> </ul> </li> </ul> <p>Every criteria combination is implicitly combined using a logical AND to form the overall filter to use to query records.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.users.search(\n...     [\n...         # Both user AND connected partner are active\n...         (\"active\", \"=\", True),\n...         (\"active_partner\", \"=\", True),\n...         # Name is either Lorem Ipsum or Alice Bob\n...         \"|\",\n...         (\"name\", \"=\", \"Lorem Ipsum\"),\n...         (\"name\", \"=\", \"Alice Bob\"),\n...     ],\n... )\n[User(record={'id': 1234, 'name': 'Lorem Ipsum', ...}, fields=None), User(record={'id': 5678, 'name': 'Alice Bob', ...}, fields=None)]\n</code></pre> <p>For the field value, this method accepts the same types as defined on the record objects.</p> <p>In addition to the native Odoo field names, field aliases and model ref field names can be specified as the field name in the search filter. Record objects can also be directly passed as the value on a filter, not just record IDs.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; user = odoo_client.users.get(1234)\n&gt;&gt;&gt; odoo_client.users.search([(\"create_user\", \"=\", user)])\n[User(record={'id': 5678, ...}, fields=None), ...]\n</code></pre> <p>When specifying a range of possible values, lists, tuples and sets are supported.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; user = odoo_client.users.get(1234)\n&gt;&gt;&gt; odoo_client.users.search([(\"create_user\", \"in\", {user})])\n[User(record={'id': 5678, ...}, fields=None), ...]\n</code></pre> <p>Search criteria using nested field references can be defined by using the dot-notation (<code>.</code>) to specify what field on what record reference to check. Field names and values for nested field references are validated and encoded just like criteria for standard field references.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.users.search(\n...     [\n...         # Check that the \"name\" field inside \"create_user\" matches\n...         (\"create_user.name\", \"=\", \"Lorem Ipsum\"),\n...     ],\n... )\n[User(record={'id': 5678, ...}, fields=None), ...]\n</code></pre> <p>To search all records, leave <code>filters</code> unset (or set it to <code>None</code>).</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.users.search()\n[User(record={'id': 1234, ...}, fields=None), ...]\n</code></pre> <p>By default all fields available on the record model will be selected, but this can be filtered using the <code>fields</code> parameter.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.users.search(fields={\"ids\"})\n[User(record={'id': 1234}, fields=['ids']), ...]\n</code></pre> <p>Use the <code>as_id</code> parameter to return the record as a list of IDs, instead of record objects.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.users.search(as_id=True)\n[1234, ...]\n</code></pre> <p>Use the <code>as_dict</code> parameter to return the record as a list of <code>dict</code> objects, instead of record objects.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.users.search(as_dict=True)\n[{'id': 1234, ...}, ...]\n</code></pre>"},{"location":"managers/index.html#parameters_2","title":"Parameters","text":"Name Type Description Default <code>filters</code> <code>Sequence[Tuple[str, str, Any] | Sequence[Any] | str] | None</code> Filters to query by (or <code>None</code> for no filters) <code>None</code> <code>fields</code> <code>Iterable[str] | None</code> Fields to select (or <code>None</code> to select all fields) <code>None</code> <code>order</code> <code>str | None</code> Field to order results by, if ordering results <code>None</code> <code>as_id</code> <code>bool</code> Return the record IDs only <code>False</code> <code>as_dict</code> <code>bool</code> Return records as dictionaries <code>False</code>"},{"location":"managers/index.html#returns_2","title":"Returns","text":"Type Description <code>list[Record]</code> Record objects (default) <code>list[int]</code> Record IDs (when <code>as_id</code> is <code>True</code>) <code>list[dict[str, Any]]</code> Record dictionaries (when <code>as_dict</code> is <code>True</code>)"},{"location":"managers/index.html#create","title":"<code>create</code>","text":"<pre><code>create(**fields: Any) -&gt; int\n</code></pre> <p>Create a new record, using the specified keyword arguments as input fields.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.sales_orders.create(...)\n1234\n</code></pre> <p>This method allows a lot of flexibility in how input fields should be defined.</p> <p>The fields passed to this method should use the same field names and value types that are defined on the record classes. The Odoo Client library will convert the values to the formats that the Odoo API expects.</p> <p>For example, when defining references to another record, you can either pass the record ID, or the record object. The field name can also either be for the ID or the object.</p> <p>Field aliases are also resolved to their target field names.</p> <pre><code>&gt;&gt;&gt; from datetime import date\n&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; user = odoo_client.users.get(5678)\n&gt;&gt;&gt; odoo_client.sales_orders.create(\n...     user=user,  # User object\n...     partner_id=9012,  # Partner ID\n...     os_invoice_date=date(2024, 6, 30),\n...     os_invoice_due_date=date(2024, 7, 20),\n...     os_project=3456,  # Field name is for the object, value is the ID\n...     order_lines=[7890],  # Field alias used\n... )\n)\n1234\n</code></pre> <p>When creating a record with a list of references to another record (a <code>One2many</code> or <code>Many2many</code> relation), it is possible to nest record mappings where an ID or object would normally go. New records will be created for those mappings, and linked to the parent record. Nested record mappings are recursively validated and processed in the same way as the parent record.</p> <pre><code>&gt;&gt;&gt; from datetime import date\n&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; user = odoo_client.users.get(5678)\n&gt;&gt;&gt; odoo_client.sales_orders.create(\n...     user=user,  # User object\n...     partner_id=9012,  # Partner ID\n...     os_invoice_date=date(2024, 6, 30),\n...     os_invoice_due_date=date(2024, 7, 20),\n...     os_project=3456,  # Field name for object, value is ID\n...     order_lines=[  # Create the sale order lines\n...         {\n...             \"name\": \"test-instance\",\n...             \"product\": odoo_client.products.get(7890),  # Product object\n...             \"product_uom\": 123456,  # Field name for object, value is ID\n...             \"product_uom_qty\": 1.0,\n...             \"price_unit\": 0.05,\n...             \"os_project_id\": 3456,  # Project ID\n...             \"os_resource_id\": \"1a2b3c4d5e1a2b3c4d5e1a2b3c4d5e1a\",\n...             \"os_region\": \"RegionOne\",\n...             \"os_resource_type\": \"Virtual Machine\",\n...             \"os_resource_name\": \"m1.small\",\n...         },\n...     ],\n... )\n1234\n</code></pre> <p>To fetch the newly created record object, pass the returned ID to the <code>get</code> method.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.sale_order_lines.get(\n...     odoo_client.sales_order_lines.create(...),\n... )\nSaleOrderLine(record={'id': 1234, ...}, fields=None)\n</code></pre>"},{"location":"managers/index.html#parameters_3","title":"Parameters","text":"Name Type Description Default <code>**fields</code> <code>Any</code> Record field values (keyword arguments) (required)"},{"location":"managers/index.html#returns_3","title":"Returns","text":"Type Description <code>int</code> The ID of the newly created record"},{"location":"managers/index.html#create_multi","title":"<code>create_multi</code>","text":"<pre><code>create_multi(*records: Mapping[str, Any]) -&gt; list[int]\n</code></pre> <p>Create one or more new records in a single request, passing in the mappings containing the record's input fields as positional arguments.</p> <p>The record mappings should be in the same format as with the <code>create</code> method.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.sales_orders.create_multi({...}, {...})\n[1234, 1235]\n</code></pre> <p>To fetch the newly created record objects, pass the returned IDs to the <code>list</code> method.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.sale_orders.list(\n...     odoo_client.sales_orders.create_multi({...}, {...}),\n... )\n[SaleOrder(record={'id': 1234, ...}, fields=None), SaleOrder(record={'id': 1235, ...}, fields=None)]\n</code></pre>"},{"location":"managers/index.html#parameters_4","title":"Parameters","text":"Name Type Description Default <code>*records</code> <code>Mapping[str, Any]</code> Record field-value mappings (positional arguments) (required)"},{"location":"managers/index.html#returns_4","title":"Returns","text":"Type Description <code>list[int]</code> The IDs of the newly created records"},{"location":"managers/index.html#unlinkdelete","title":"<code>unlink</code>/<code>delete</code>","text":"<pre><code>unlink(*records: Record | int | Iterable[Record | int]) -&gt; None\n</code></pre> <pre><code>delete(*records: Record | int | Iterable[Record | int]) -&gt; None\n</code></pre> <p>Delete one or more records from Odoo.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.sales_order_lines.unlink(1234)\n</code></pre> <p>This method accepts either a record object or ID, or an iterable of either of those types. Multiple positional arguments are allowed.</p> <p>All specified records will be deleted in a single request.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; line1 = odoo_client.sales_order_lines.get(1234)\n&gt;&gt;&gt; line2 = odoo_client.sales_order_lines.get(5678)\n&gt;&gt;&gt; odoo_client.sales_order_lines.unlink(line1, 9012, [line2, 3456])\n</code></pre>"},{"location":"managers/index.html#parameters_5","title":"Parameters","text":"Name Type Description Default <code>*records</code> <code>Record | int | Iterable[Record | int]</code> The records to delete (object, ID, or record/ID list) (positional arguments) (required)"},{"location":"managers/index.html#named-record-managers","title":"Named Record Managers","text":"<p>Some record types have a <code>name</code> field that is generally expected to be unique. The managers for these record types have additional methods for querying records by name.</p> <ul> <li>Account Moves (Invoices)</li> <li>Companies</li> <li>OpenStack Credit Types</li> <li>Currencies</li> <li>OpenStack Customer Groups</li> <li>OpenStack Grant Types</li> <li>Partner Categories</li> <li>Pricelists</li> <li>Product Categories</li> <li>OpenStack Projects</li> <li>OpenStack Reseller Tiers</li> <li>Sale Orders</li> <li>OpenStack Support Subscription Types</li> <li>Taxes</li> <li>Tax Groups</li> </ul>"},{"location":"managers/index.html#get_by_name","title":"<code>get_by_name</code>","text":"<pre><code>get_by_name(\n    name: str,\n    fields: Iterable[str] | None = None,\n    as_id: bool = False,\n    as_dict: bool = False,\n    optional: bool = False,\n) -&gt; Record\n</code></pre> <pre><code>get_by_name(\n    name: str,\n    fields: Iterable[str] | None = None,\n    as_id: bool = False,\n    as_dict: bool = False,\n    optional: bool = True,\n) -&gt; Record | None\n</code></pre> <pre><code>get_by_name(\n    name: str,\n    fields: Iterable[str] | None = None,\n    as_id: bool = True,\n    as_dict: bool = False,\n    optional: bool = False,\n) -&gt; int\n</code></pre> <pre><code>get_by_name(\n    name: str,\n    fields: Iterable[str] | None = None,\n    as_id: bool = True,\n    as_dict: bool = False,\n    optional: bool = True,\n) -&gt; int | None\n</code></pre> <pre><code>get_by_name(\n    name: str,\n    fields: Iterable[str] | None = None,\n    as_id: bool = False,\n    as_dict: bool = True,\n    optional: bool = False,\n) -&gt; dict[str, Any]\n</code></pre> <pre><code>get_by_name(\n    name: str,\n    fields: Iterable[str] | None = None,\n    as_id: bool = False,\n    as_dict: bool = True,\n    optional: bool = True,\n) -&gt; dict[str, Any] | None\n</code></pre> <p>Query a unique record by name.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.currencies.get_by_name(\"NZD\")\n[Currency(record={'id': 1234, 'name': 'NZD', ...}, fields=None)]\n</code></pre> <p>A number of parameters are available to configure the return type, and what happens when a result is not found.</p> <p>By default all fields available on the record model will be selected, but this can be filtered using the <code>fields</code> parameter.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.currencies.get_by_name(\"NZD\", fields={\"rounding\"})\nCurrency(record={'id': 1234, 'rounding': 0.001}, fields=['rounding'])\n</code></pre> <p>Use the <code>as_id</code> parameter to return the ID of the record, instead of the record object.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.currencies.get_by_name(\"NZD\", as_id=True)\n1234\n</code></pre> <p>Use the <code>as_dict</code> parameter to return the record as a <code>dict</code> object, instead of a record object.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.currencies.get_by_name(\"NZD\", as_dict=True)\n{'id': 1234, ...}\n</code></pre> <p>When <code>optional</code> is <code>True</code>, <code>None</code> is returned if a record with the given name does not exist, instead of raising an error.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.currencies.get_by_name(\"non-existent\", optional=True)\nNone\n</code></pre>"},{"location":"managers/index.html#parameters_6","title":"Parameters","text":"Name Type Description Default <code>name</code> <code>str</code> The record name (required) <code>fields</code> <code>Iterable[str] | None</code> Fields to select (or <code>None</code> to select all fields) <code>None</code> <code>as_id</code> <code>bool</code> Return the record IDs only <code>False</code> <code>as_dict</code> <code>bool</code> Return records as dictionaries <code>False</code> <code>optional</code> <code>bool</code> Return <code>None</code> if not found <code>False</code>"},{"location":"managers/index.html#raises_2","title":"Raises","text":"Type Description <code>RecordNotFoundError</code> If no record with the given name was found (when <code>optional</code> is <code>False</code>) <code>MultipleRecordsFoundError</code> If multiple records were found with the same name"},{"location":"managers/index.html#returns_5","title":"Returns","text":"Type Description <code>Record</code> Record object (default) <code>int</code> Record ID (when <code>as_id</code> is <code>True</code>) <code>dict[str, Any]</code> Record dictionary (when <code>as_dict</code> is <code>True</code>) <code>None</code> If a record with the given name does not exist (when <code>optional</code> is <code>True</code>)"},{"location":"managers/index.html#coded-record-managers","title":"Coded Record Managers","text":"<p>Some record types have a <code>code</code> field that is guaranteed to be unique. The managers for these record types have additional methods for querying records by code.</p> <ul> <li>OpenStack Referral Codes</li> <li>OpenStack Voucher Codes</li> </ul>"},{"location":"managers/index.html#get_by_code","title":"<code>get_by_code</code>","text":"<pre><code>get_by_code(\n    code: str,\n    fields: Iterable[str] | None = None,\n    as_id: bool = False,\n    as_dict: bool = False,\n    optional: bool = False,\n) -&gt; Record\n</code></pre> <pre><code>get_by_code(\n    code: str,\n    fields: Iterable[str] | None = None,\n    as_id: bool = False,\n    as_dict: bool = False,\n    optional: bool = True,\n) -&gt; Record | None\n</code></pre> <pre><code>get_by_code(\n    code: str,\n    fields: Iterable[str] | None = None,\n    as_id: bool = True,\n    as_dict: bool = False,\n    optional: bool = False,\n) -&gt; int\n</code></pre> <pre><code>get_by_code(\n    code: str,\n    fields: Iterable[str] | None = None,\n    as_id: bool = True,\n    as_dict: bool = False,\n    optional: bool = True,\n) -&gt; int | None\n</code></pre> <pre><code>get_by_code(\n    code: str,\n    fields: Iterable[str] | None = None,\n    as_id: bool = False,\n    as_dict: bool = True,\n    optional: bool = False,\n) -&gt; dict[str, Any]\n</code></pre> <pre><code>get_by_code(\n    code: str,\n    fields: Iterable[str] | None = None,\n    as_id: bool = False,\n    as_dict: bool = True,\n    optional: bool = True,\n) -&gt; dict[str, Any] | None\n</code></pre> <p>Query a unique record by code.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.voucher_codes.get_by_code(\"OSCODE123\")\nVoucherCode(record={'id': 1234, 'code': 'OSCODE123', ...}, fields=None)\n</code></pre> <p>A number of parameters are available to configure the return type, and what happens when a result is not found.</p> <p>By default all fields available on the record model will be selected, but this can be filtered using the <code>fields</code> parameter.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.voucher_codes.get_by_code(\"OSCODE123\", fields={\"code\", \"multi_use\"})\nVoucherCode(record={'id': 1234, 'code': 'OSCODE123', 'multi_use': True, ...}, fields=['code', 'multi_use'])\n</code></pre> <p>Use the <code>as_id</code> parameter to return the ID of the record, instead of the record object.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.voucher_codes.get_by_code(\"OSCODE123\", as_id=True)\n1234\n</code></pre> <p>Use the <code>as_dict</code> parameter to return the record as a <code>dict</code> object, instead of a record object.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.voucher_codes.get_by_code(\"OSCODE123\", as_dict=True)\n{'id': 1234, ...}\n</code></pre> <p>When <code>optional</code> is <code>True</code>, <code>None</code> is returned if a record with the given code does not exist, instead of raising an error.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.voucher_codes.get_by_code(\"non-existent\", optional=True)\nNone\n</code></pre>"},{"location":"managers/index.html#parameters_7","title":"Parameters","text":"Name Type Description Default <code>code</code> <code>str</code> The record code (required) <code>fields</code> <code>Iterable[str] | None</code> Fields to select (or <code>None</code> to select all fields) <code>None</code> <code>as_id</code> <code>bool</code> Return the record IDs only <code>False</code> <code>as_dict</code> <code>bool</code> Return records as dictionaries <code>False</code> <code>optional</code> <code>bool</code> Return <code>None</code> if not found <code>False</code>"},{"location":"managers/index.html#raises_3","title":"Raises","text":"Type Description <code>RecordNotFoundError</code> If no record with the given code was found (when <code>optional</code> is <code>False</code>) <code>MultipleRecordsFoundError</code> If multiple records were found with the same code"},{"location":"managers/index.html#returns_6","title":"Returns","text":"Type Description <code>Record</code> Record object (default) <code>int</code> Record ID (when <code>as_id</code> is <code>True</code>) <code>dict[str, Any]</code> Record dictionary (when <code>as_dict</code> is <code>True</code>) <code>None</code> If a record with the given code does not exist (when <code>optional</code> is <code>True</code>)"},{"location":"managers/index.html#records","title":"Records","text":"<p>Record manager methods return record objects for the corresponding model in Odoo.</p> <p>Record fields can be accessed as attributes on these record objects. The record classes are fully type hinted, allowing IDEs and validation tools such as Mypy to verify that your application is using the fields correctly.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient, User\n&gt;&gt;&gt; user: User | None = None\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; user = odoo_client.users.get(1234)\n&gt;&gt;&gt; user\nUser(record={'id': 1234, ...}, fields=None)\n&gt;&gt;&gt; user.id\n1234\n</code></pre>"},{"location":"managers/index.html#attributes-and-methods","title":"Attributes and Methods","text":"<p>The following attributes and methods are available on all record types.</p> <p>To find the available attributes and methods on specific record classes, check the manager page for the record type.</p>"},{"location":"managers/index.html#id","title":"<code>id</code>","text":"<pre><code>id: int\n</code></pre> <p>The record's ID in Odoo.</p>"},{"location":"managers/index.html#create_date","title":"<code>create_date</code>","text":"<pre><code>create_date: datetime\n</code></pre> <p>The time the record was created.</p>"},{"location":"managers/index.html#create_uid","title":"<code>create_uid</code>","text":"<pre><code>create_uid: int\n</code></pre> <p>The ID of the user that created this record.</p>"},{"location":"managers/index.html#create_name","title":"<code>create_name</code>","text":"<pre><code>create_name: str\n</code></pre> <p>The name of the user that created this record.</p>"},{"location":"managers/index.html#create_user","title":"<code>create_user</code>","text":"<pre><code>create_user: User\n</code></pre> <p>The user that created this record.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/index.html#write_date","title":"<code>write_date</code>","text":"<pre><code>write_date: datetime\n</code></pre> <p>The time the record was last modified.</p>"},{"location":"managers/index.html#write_uid","title":"<code>write_uid</code>","text":"<pre><code>write_uid: int\n</code></pre> <p>The ID of the user that last modified this record.</p>"},{"location":"managers/index.html#write_name","title":"<code>write_name</code>","text":"<pre><code>write_name: str\n</code></pre> <p>The name of the user that modified this record.</p>"},{"location":"managers/index.html#write_user","title":"<code>write_user</code>","text":"<pre><code>write_user: User\n</code></pre> <p>The user that last modified this record.</p> <p>This fetches the full record from Odoo once, and caches it for subsequence accesses.</p>"},{"location":"managers/index.html#as_dict","title":"<code>as_dict</code>","text":"<pre><code>as_dict(raw: bool = False) -&gt; dict[str, Any]\n</code></pre> <p>Convert this record object to a dictionary.</p> <p>The fields and values in the dictionary are the same as if the record was queried using <code>as_dict=True</code>. This changes field names to the record object equivalents, if they are different, to take into account fields being named differently across Odoo versions.</p> <pre><code>&gt;&gt;&gt; user\nUser(record={'id': 1234, ...}, fields=None)\n&gt;&gt;&gt; user.as_dict()\n{'id': 1234, ...}\n</code></pre> <p>Set <code>raw=True</code> to instead get the raw record dictionary fields and values as returned by OdooRPC.</p> <pre><code>&gt;&gt;&gt; user\nUser(record={'id': 1234, ...}, fields=None)\n&gt;&gt;&gt; user.as_dict(raw=True)\n{'id': 1234, ...}\n</code></pre>"},{"location":"managers/index.html#parameters_8","title":"Parameters","text":"Name Type Description Default <code>raw</code> <code>bool</code> Return raw dictionary from OdooRPC <code>False</code>"},{"location":"managers/index.html#returns_7","title":"Returns","text":"Type Description <code>dict[str, Any]</code> Record dictionary"},{"location":"managers/index.html#refresh","title":"<code>refresh</code>","text":"<pre><code>refresh() -&gt; Self\n</code></pre> <p>Fetch the latest version of this record from Odoo.</p> <p>This does not update the record object in place, a new object is returned with the up-to-date field values.</p> <pre><code>&gt;&gt;&gt; user\nUser(record={'id': 1234, 'name': 'Old Name', ...}, fields=None)\n&gt;&gt;&gt; user.refresh()\nUser(record={'id': 1234, 'name': 'New Name', ...}, fields=None)\n</code></pre>"},{"location":"managers/index.html#returns_8","title":"Returns","text":"Type Description <code>Self</code> Latest version of the record object"},{"location":"managers/index.html#unlinkdelete_1","title":"<code>unlink</code>/<code>delete</code>","text":"<pre><code>unlink() -&gt; None\n</code></pre> <pre><code>delete() -&gt; None\n</code></pre> <p>Delete this record from Odoo.</p> <pre><code>&gt;&gt;&gt; user\nUser(record={'id': 1234, 'name': 'Old Name', ...}, fields=None)\n&gt;&gt;&gt; user.unlink()\n&gt;&gt;&gt; user.refresh()\n...\nopenstack_odooclient.exceptions.RecordNotFoundError: User record not found with ID: 1234\n</code></pre>"},{"location":"managers/index.html#custom-managers-and-record-types","title":"Custom Managers and Record Types","text":"<p>The OpenStack Odoo Client library supports defining new record types and adding managers for them to the Odoo client object, allowing for adding support for custom Odoo add-ons.</p> <p>For more information, see Custom Managers and Record Types.</p>"},{"location":"managers/account-move-line.html","title":"Account Move (Invoice) Lines","text":"<p>This page documents how to use the manager and record objects for account move (invoice) lines.</p>"},{"location":"managers/account-move-line.html#details","title":"Details","text":"Name Value Odoo Modules Accounting, OpenStack Integration Odoo Model Name <code>account.move.line</code> Manager <code>account_move_lines</code> Record Type <code>AccountMoveLine</code>"},{"location":"managers/account-move-line.html#manager","title":"Manager","text":"<p>The account move (invoice) line manager is available as the <code>account_move_lines</code> attribute on the Odoo client object.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.account_move_lines.get(1234)\nAccountMoveLine(record={'id': 1234, ...}, fields=None)\n</code></pre> <p>For more information on how to use managers, refer to Managers.</p>"},{"location":"managers/account-move-line.html#record","title":"Record","text":"<p>The account move (invoice) line manager returns <code>AccountMoveLine</code> record objects.</p> <p>To import the record class for type hinting purposes:</p> <pre><code>from openstack_odooclient import AccountMoveLine\n</code></pre> <p>The record class currently implements the following fields and methods.</p> <p>For more information on attributes and methods common to all record types, see Record Attributes and Methods.</p>"},{"location":"managers/account-move-line.html#currency_id","title":"<code>currency_id</code>","text":"<pre><code>currency_id: int\n</code></pre> <p>The ID for the currency used in this account move (invoice) line.</p>"},{"location":"managers/account-move-line.html#currency_name","title":"<code>currency_name</code>","text":"<pre><code>currency_name: str\n</code></pre> <p>The name of the currency used in this account move (invoice) line.</p>"},{"location":"managers/account-move-line.html#currency","title":"<code>currency</code>","text":"<pre><code>currency: Currency\n</code></pre> <p>The currency used in this account move (invoice) line.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/account-move-line.html#line_tax_amount","title":"<code>line_tax_amount</code>","text":"<pre><code>line_tax_amount: float\n</code></pre> <p>Amount charged in tax on the account move (invoice) line.</p>"},{"location":"managers/account-move-line.html#move_id","title":"<code>move_id</code>","text":"<pre><code>move_id: int\n</code></pre> <p>The ID for the account move (invoice) this line is part of.</p>"},{"location":"managers/account-move-line.html#move_name","title":"<code>move_name</code>","text":"<pre><code>move_name: str\n</code></pre> <p>The name of the account move (invoice) this line is part of.</p>"},{"location":"managers/account-move-line.html#move","title":"<code>move</code>","text":"<pre><code>move: AccountMove\n</code></pre> <p>The account move (invoice) this line is part of.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/account-move-line.html#name","title":"<code>name</code>","text":"<pre><code>name: str\n</code></pre> <p>Name of the product charged on the account move (invoice) line.</p>"},{"location":"managers/account-move-line.html#os_project_id","title":"<code>os_project_id</code>","text":"<pre><code>os_project_id: int | None\n</code></pre> <p>The ID for the OpenStack project this account move (invoice) line was generated for.</p>"},{"location":"managers/account-move-line.html#os_project_name","title":"<code>os_project_name</code>","text":"<pre><code>os_project_name: str | None\n</code></pre> <p>The name of the OpenStack project this account move (invoice) line was generated for.</p>"},{"location":"managers/account-move-line.html#os_project","title":"<code>os_project</code>","text":"<pre><code>os_project: Project | None\n</code></pre> <p>The OpenStack project this account move (invoice) line was generated for.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/account-move-line.html#os_region","title":"<code>os_region</code>","text":"<pre><code>os_region: str | Literal[False]\n</code></pre> <p>The OpenStack region the account move (invoice) line was created from.</p>"},{"location":"managers/account-move-line.html#os_resource_id","title":"<code>os_resource_id</code>","text":"<pre><code>os_resource_id: str | Literal[False]\n</code></pre> <p>The OpenStack resource ID for the resource that generated this account move (invoice) line.</p>"},{"location":"managers/account-move-line.html#os_resource_name","title":"<code>os_resource_name</code>","text":"<pre><code>os_resource_name: str | Literal[False]\n</code></pre> <p>The name of the OpenStack resource tier or flavour, as used by services such as Distil for rating purposes.</p> <p>For example, if this is the account move (invoice) line for a compute instance, this would be set to the instance's flavour name.</p>"},{"location":"managers/account-move-line.html#os_resource_type","title":"<code>os_resource_type</code>","text":"<pre><code>os_resource_type: str | Literal[False]\n</code></pre> <p>A human-readable description of the type of resource captured by this account move (invoice) line.</p>"},{"location":"managers/account-move-line.html#price_subtotal","title":"<code>price_subtotal</code>","text":"<pre><code>price_subtotal: float\n</code></pre> <p>Amount charged for the product (untaxed) on the account move (invoice) line.</p>"},{"location":"managers/account-move-line.html#price_unit","title":"<code>price_unit</code>","text":"<pre><code>price_unit: float\n</code></pre> <p>Unit price for the product used on the account move (invoice) line.</p>"},{"location":"managers/account-move-line.html#product_id","title":"<code>product_id</code>","text":"<pre><code>product_id: int\n</code></pre> <p>The ID for the product charged on the account move (invoice) line.</p>"},{"location":"managers/account-move-line.html#product_name","title":"<code>product_name</code>","text":"<pre><code>product_name: int\n</code></pre> <p>The name of the product charged on the account move (invoice) line.</p>"},{"location":"managers/account-move-line.html#product","title":"<code>product</code>","text":"<pre><code>product: Product\n</code></pre> <p>The product charged on the account move (invoice) line.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/account-move-line.html#quantity","title":"<code>quantity</code>","text":"<pre><code>quantity: float\n</code></pre> <p>Quantity of product charged on the account move (invoice) line.</p>"},{"location":"managers/account-move.html","title":"Account Moves (Invoices)","text":"<p>This page documents how to use the manager and record objects for account moves (invoices).</p>"},{"location":"managers/account-move.html#details","title":"Details","text":"Name Value Odoo Modules Accounting, OpenStack Integration Odoo Model Name <code>account.move</code> Manager <code>account_moves</code> Record Type <code>AccountMove</code>"},{"location":"managers/account-move.html#manager","title":"Manager","text":"<p>The account move (invoice) manager is available as the <code>account_moves</code> attribute on the Odoo client object.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.account_moves.get(1234)\nAccountMove(record={'id': 1234, ...}, fields=None)\n</code></pre> <p>For more information on how to use managers, refer to Managers.</p>"},{"location":"managers/account-move.html#record","title":"Record","text":"<p>The account move (invoice) manager returns <code>AccountMove</code> record objects.</p> <p>To import the record class for type hinting purposes:</p> <pre><code>from openstack_odooclient import AccountMove\n</code></pre> <p>The record class currently implements the following fields and methods.</p> <p>For more information on attributes and methods common to all record types, see Record Attributes and Methods.</p>"},{"location":"managers/account-move.html#amount_total","title":"<code>amount_total</code>","text":"<pre><code>amount_total: float\n</code></pre> <p>Total (taxed) amount charged on the account move (invoice).</p>"},{"location":"managers/account-move.html#amount_untaxed","title":"<code>amount_untaxed</code>","text":"<pre><code>amount_untaxed: float\n</code></pre> <p>Total (untaxed) amount charged on the account move (invoice).</p>"},{"location":"managers/account-move.html#currency_id","title":"<code>currency_id</code>","text":"<pre><code>currency_id: int\n</code></pre> <p>The ID for the currency used in this account move (invoice).</p>"},{"location":"managers/account-move.html#currency_name","title":"<code>currency_name</code>","text":"<pre><code>currency_name: str\n</code></pre> <p>The name of the currency used in this account move (invoice).</p>"},{"location":"managers/account-move.html#currency","title":"<code>currency</code>","text":"<pre><code>currency: Currency\n</code></pre> <p>The currency used in this account move (invoice).</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/account-move.html#invoice_date","title":"<code>invoice_date</code>","text":"<pre><code>invoice_date: date\n</code></pre> <p>Date associated with the account move (invoice).</p>"},{"location":"managers/account-move.html#invoice_line_ids","title":"<code>invoice_line_ids</code>","text":"<pre><code>invoice_line_ids: list[int]\n</code></pre> <p>The list of the IDs for the account move (invoice) lines that comprise this account move (invoice).</p>"},{"location":"managers/account-move.html#invoice_lines","title":"<code>invoice_lines</code>","text":"<pre><code>invoice_lines: list[AccountMoveLine]\n</code></pre> <p>A list of account move (invoice) lines that comprise this account move (invoice).</p> <p>This fetches the full records from Odoo once, and caches them for subsequent accesses.</p>"},{"location":"managers/account-move.html#is_move_sent","title":"<code>is_move_sent</code>","text":"<pre><code>is_move_sent: bool\n</code></pre> <p>Whether or not the account move (invoice) has been sent.</p>"},{"location":"managers/account-move.html#move_type","title":"<code>move_type</code>","text":"<pre><code>move_type: Literal[\n    \"entry\",\n    \"out_invoice\",\n    \"out_refund\",\n    \"in_invoice\",\n    \"in_refund\",\n    \"out_receipt\",\n    \"in_receipt\",\n]\n</code></pre> <p>The type of account move (invoice).</p> <p>Values:</p> <ul> <li><code>entry</code> - Journal Entry</li> <li><code>out_invoice</code> - Customer Invoice</li> <li><code>out_refund</code> - Customer Credit Note</li> <li><code>in_invoice</code> - Vendor Bill</li> <li><code>in_refund</code> - Vendor Credit Note</li> <li><code>out_receipt</code> - Sales Receipt</li> <li><code>in_receipt</code> - Purchase Receipt</li> </ul>"},{"location":"managers/account-move.html#name","title":"<code>name</code>","text":"<pre><code>name: str | Literal[False]\n</code></pre> <p>Name assigned to the account move (invoice), if posted.</p>"},{"location":"managers/account-move.html#os_project_id","title":"<code>os_project_id</code>","text":"<pre><code>os_project_id: int | None\n</code></pre> <p>The ID of the OpenStack project this account move (invoice) was generated for, if this is an invoice for OpenStack project usage.</p>"},{"location":"managers/account-move.html#os_project_name","title":"<code>os_project_name</code>","text":"<pre><code>os_project_name: str | None\n</code></pre> <p>The name of the OpenStack project this account move (invoice) was generated for, if this is an invoice for OpenStack project usage.</p>"},{"location":"managers/account-move.html#os_project","title":"<code>os_project</code>","text":"<pre><code>os_project: Project | None\n</code></pre> <p>The OpenStack project this account move (invoice) was generated for, if this is an invoice for OpenStack project usage.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/account-move.html#payment_state","title":"<code>payment_state</code>","text":"<pre><code>payment_state: Literal[\n    \"not_paid\",\n    \"in_payment\",\n    \"paid\",\n    \"partial\",\n    \"reversed\",\n    \"invoicing_legacy\",\n]\n</code></pre> <p>The current payment state of the account move (invoice).</p> <p>Values:</p> <ul> <li><code>not_paid</code> - Not Paid</li> <li><code>in_payment</code> - In Payment</li> <li><code>paid</code> - Paid</li> <li><code>partial</code> - Partially Paid</li> <li><code>reversed</code> - Reversed</li> <li><code>invoicing_legacy</code> - Invoicing App Legacy</li> </ul>"},{"location":"managers/account-move.html#state","title":"state","text":"<pre><code>state: Literal[\"draft\", \"posted\", \"cancel\"]\n</code></pre> <p>The current state of the account move (invoice).</p> <p>Values:</p> <ul> <li><code>draft</code> - Draft invoice</li> <li><code>posted</code> - Posted (finalised) invoice</li> <li><code>cancel</code> - Cancelled invoice</li> </ul>"},{"location":"managers/company.html","title":"Companies","text":"<p>This page documents how to use the manager and record objects for companies.</p>"},{"location":"managers/company.html#details","title":"Details","text":"Name Value Odoo Modules Base, Product, Sales Odoo Model Name <code>res.company</code> Manager <code>companies</code> Record Type <code>Company</code>"},{"location":"managers/company.html#manager","title":"Manager","text":"<p>The company manager is available as the <code>companies</code> attribute on the Odoo client object.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.companies.get(1234)\nCompany(record={'id': 1234, ...}, fields=None)\n</code></pre> <p>For more information on how to use managers, refer to Managers.</p>"},{"location":"managers/company.html#record","title":"Record","text":"<p>The company manager returns <code>Company</code> record objects.</p> <p>To import the record class for type hinting purposes:</p> <pre><code>from openstack_odooclient import Company\n</code></pre> <p>The record class currently implements the following fields and methods.</p> <p>For more information on attributes and methods common to all record types, see Record Attributes and Methods.</p>"},{"location":"managers/company.html#active","title":"<code>active</code>","text":"<pre><code>active: bool\n</code></pre> <p>Whether or not this company is active (enabled).</p>"},{"location":"managers/company.html#child_ids","title":"<code>child_ids</code>","text":"<pre><code>child_ids: list[int]\n</code></pre> <p>A list of IDs for the child companies.</p>"},{"location":"managers/company.html#children","title":"<code>children</code>","text":"<pre><code>children: list[Company]\n</code></pre> <p>The list of child companies.</p> <p>This fetches the full records from Odoo once, and caches them for subsequent accesses.</p>"},{"location":"managers/company.html#name","title":"<code>name</code>","text":"<pre><code>name: str\n</code></pre> <p>Company name, set from the partner name.</p>"},{"location":"managers/company.html#parent_id","title":"<code>parent_id</code>","text":"<pre><code>parent_id: int | None\n</code></pre> <p>The ID for the parent company, if this company is the child of another company.</p>"},{"location":"managers/company.html#parent_name","title":"<code>parent_name</code>","text":"<pre><code>parent_name: str | None\n</code></pre> <p>The name of the parent company, if this company is the child of another company.</p>"},{"location":"managers/company.html#parent","title":"<code>parent</code>","text":"<pre><code>parent: Company | None\n</code></pre> <p>The parent company, if this company is the child of another company.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/company.html#parent_path","title":"<code>parent_path</code>","text":"<pre><code>parent_path: str | Literal[False]\n</code></pre> <p>The path of the parent company, if there is a parent.</p>"},{"location":"managers/company.html#partner_id","title":"<code>partner_id</code>","text":"<pre><code>partner_id: int\n</code></pre> <p>The ID for the partner for the company.</p>"},{"location":"managers/company.html#partner_name","title":"<code>partner_name</code>","text":"<pre><code>partner_name: str\n</code></pre> <p>The name of the partner for the company.</p>"},{"location":"managers/company.html#partner","title":"<code>partner</code>","text":"<pre><code>partner: Partner\n</code></pre> <p>The partner for the company.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/credit-transaction.html","title":"OpenStack Credit Transactions","text":"<p>This page documents how to use the manager and record objects for credit transactions.</p>"},{"location":"managers/credit-transaction.html#details","title":"Details","text":"Name Value Odoo Modules OpenStack Integration Odoo Model Name <code>openstack.credit.transaction</code> Manager <code>credit_transactions</code> Record Type <code>CreditTransaction</code>"},{"location":"managers/credit-transaction.html#manager","title":"Manager","text":"<p>The credit transaction manager is available as the <code>credit_transactions</code> attribute on the Odoo client object.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.credit_transactions.get(1234)\nCreditTransaction(record={'id': 1234, ...}, fields=None)\n</code></pre> <p>For more information on how to use managers, refer to Managers.</p>"},{"location":"managers/credit-transaction.html#record","title":"Record","text":"<p>The credit transaction manager returns <code>CreditTransaction</code> record objects.</p> <p>To import the record class for type hinting purposes:</p> <pre><code>from openstack_odooclient import CreditTransaction\n</code></pre> <p>The record class currently implements the following fields and methods.</p> <p>For more information on attributes and methods common to all record types, see Record Attributes and Methods.</p>"},{"location":"managers/credit-transaction.html#credit_id","title":"<code>credit_id</code>","text":"<pre><code>credit_id: int\n</code></pre> <p>The ID of the credit this transaction was made against.</p>"},{"location":"managers/credit-transaction.html#credit_name","title":"<code>credit_name</code>","text":"<pre><code>credit_name: str\n</code></pre> <p>The name of the credit this transaction was made against.</p>"},{"location":"managers/credit-transaction.html#credit","title":"<code>credit</code>","text":"<p><pre><code>credit: Credit\n</code></pre> The credit this transaction was made against.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/credit-transaction.html#description","title":"<code>description</code>","text":"<pre><code>description: str\n</code></pre> <p>A description of this credit transaction.</p>"},{"location":"managers/credit-transaction.html#value","title":"<code>value</code>","text":"<pre><code>value: float\n</code></pre> <p>The value of the credit transaction.</p>"},{"location":"managers/credit-type.html","title":"OpenStack Credit Types","text":"<p>This page documents how to use the manager and record objects for credit types.</p>"},{"location":"managers/credit-type.html#details","title":"Details","text":"Name Value Odoo Modules OpenStack Integration Odoo Model Name <code>openstack.credit.type</code> Manager <code>credit_types</code> Record Type <code>CreditType</code>"},{"location":"managers/credit-type.html#manager","title":"Manager","text":"<p>The credit type manager is available as the <code>credit_types</code> attribute on the Odoo client object.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.credit_types.get(1234)\nCreditType(record={'id': 1234, ...}, fields=None)\n</code></pre> <p>For more information on how to use managers, refer to Managers.</p>"},{"location":"managers/credit-type.html#record","title":"Record","text":"<p>The credit type manager returns <code>CreditType</code> record objects.</p> <p>To import the record class for type hinting purposes:</p> <pre><code>from openstack_odooclient import CreditType\n</code></pre> <p>The record class currently implements the following fields and methods.</p> <p>For more information on attributes and methods common to all record types, see Record Attributes and Methods.</p>"},{"location":"managers/credit-type.html#credit_ids","title":"<code>credit_ids</code>","text":"<pre><code>credit_ids: list[int]\n</code></pre> <p>A list of IDs for the credits which are of this credit type.</p>"},{"location":"managers/credit-type.html#credits","title":"<code>credits</code>","text":"<pre><code>credits: list[Credit]\n</code></pre> <p>A list of credits which are of this credit type.</p> <p>This fetches the full records from Odoo once, and caches them for subsequent accesses.</p>"},{"location":"managers/credit-type.html#name","title":"<code>name</code>","text":"<pre><code>name: str\n</code></pre> <p>Name of the Credit Type.</p>"},{"location":"managers/credit-type.html#only_for_product_ids","title":"<code>only_for_product_ids</code>","text":"<pre><code>only_for_product_ids: list[int]\n</code></pre> <p>A list of IDs for the products this credit applies to.</p> <p>Mutually exclusive with <code>only_for_product_category_ids</code>/<code>only_for_product_categories</code>. If none of these values are specified, the credit applies to all products.</p>"},{"location":"managers/credit-type.html#only_for_products","title":"<code>only_for_products</code>","text":"<pre><code>only_for_products: list[Product]\n</code></pre> <p>A list of products which this credit applies to.</p> <p>Mutually exclusive with <code>only_for_product_category_ids</code>/<code>only_for_product_categories</code>. If none of these values are specified, the credit applies to all products.</p> <p>This fetches the full records from Odoo once, and caches them for subsequent accesses.</p>"},{"location":"managers/credit-type.html#only_for_product_category_ids","title":"<code>only_for_product_category_ids</code>","text":"<pre><code>only_for_product_category_ids: list[int]\n</code></pre> <p>A list of IDs for the product categories this credit applies to.</p> <p>Mutually exclusive with <code>only_for_product_ids</code>/<code>only_for_products</code>. If none of these values are specified, the credit applies to all products.</p>"},{"location":"managers/credit-type.html#only_for_product_categories","title":"<code>only_for_product_categories</code>","text":"<pre><code>only_for_product_categories: list[ProductCategory]\n</code></pre> <p>A list of product categories which this credit applies to.</p> <p>Mutually exclusive with <code>only_for_product_ids</code>/<code>only_for_products</code>. If none of these values are specified, the credit applies to all products.</p> <p>This fetches the full records from Odoo once, and caches them for subsequent accesses.</p>"},{"location":"managers/credit-type.html#product_id","title":"<code>product_id</code>","text":"<pre><code>product_id: int\n</code></pre> <p>The ID of the product to use when applying the credit to invoices.</p>"},{"location":"managers/credit-type.html#product_nane","title":"<code>product_nane</code>","text":"<pre><code>product_name: str\n</code></pre> <p>The name of the product to use when applying the credit to invoices.</p>"},{"location":"managers/credit-type.html#product","title":"<code>product</code>","text":"<pre><code>product: Product\n</code></pre> <p>The product to use when applying the credit to invoices.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/credit-type.html#refundable","title":"<code>refundable</code>","text":"<pre><code>refundable: bool\n</code></pre> <p>Whether or not the credit is refundable.</p>"},{"location":"managers/credit.html","title":"OpenStack Credits","text":"<p>This page documents how to use the manager and record objects for credits.</p>"},{"location":"managers/credit.html#details","title":"Details","text":"Name Value Odoo Modules OpenStack Integration Odoo Model Name <code>openstack.credit</code> Manager <code>credits</code> Record Type <code>Credit</code>"},{"location":"managers/credit.html#manager","title":"Manager","text":"<p>The credit manager is available as the <code>credits</code> attribute on the Odoo client object.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.credits.get(1234)\nCredit(record={'id': 1234, ...}, fields=None)\n</code></pre> <p>For more information on how to use managers, refer to Managers.</p>"},{"location":"managers/credit.html#record","title":"Record","text":"<p>The credit manager returns <code>Credit</code> record objects.</p> <p>To import the record class for type hinting purposes:</p> <pre><code>from openstack_odooclient import Credit\n</code></pre> <p>The record class currently implements the following fields and methods.</p> <p>For more information on attributes and methods common to all record types, see Record Attributes and Methods.</p>"},{"location":"managers/credit.html#credit_type_id","title":"<code>credit_type_id</code>","text":"<pre><code>credit_type_id: int\n</code></pre> <p>The ID of the type of this credit.</p>"},{"location":"managers/credit.html#credit_type_name","title":"<code>credit_type_name</code>","text":"<pre><code>credit_type_name: str\n</code></pre> <p>The name of the type of this credit.</p>"},{"location":"managers/credit.html#credit_type","title":"<code>credit_type</code>","text":"<pre><code>credit_type: CreditType\n</code></pre> <p>The type of this credit.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/credit.html#current_balance","title":"<code>current_balance</code>","text":"<pre><code>current_balance: float\n</code></pre> <p>The current remaining balance on the credit.</p>"},{"location":"managers/credit.html#expiry_date","title":"<code>expiry_date</code>","text":"<pre><code>expiry_date: date\n</code></pre> <p>The date the credit expires.</p>"},{"location":"managers/credit.html#initial_balance","title":"<code>initial_balance</code>","text":"<pre><code>initial_balance: float\n</code></pre> <p>The initial balance this credit started off with.</p>"},{"location":"managers/credit.html#name","title":"<code>name</code>","text":"<pre><code>name: str\n</code></pre> <p>The automatically generated name of the credit.</p>"},{"location":"managers/credit.html#start_date","title":"<code>start_date</code>","text":"<pre><code>start_date: date\n</code></pre> <p>The start date of the credit.</p>"},{"location":"managers/credit.html#transaction_ids","title":"<code>transaction_ids</code>","text":"<pre><code>transaction_ids: list[int]\n</code></pre> <p>A list of IDs for the transactions that have been made using this credit.</p>"},{"location":"managers/credit.html#transactions","title":"<code>transactions</code>","text":"<pre><code>transactions: list[CreditTransaction]\n</code></pre> <p>The transactions that have been made using this credit.</p> <p>This fetches the full records from Odoo once, and caches them for subsequent accesses.</p>"},{"location":"managers/credit.html#voucher_code_id","title":"<code>voucher_code_id</code>","text":"<pre><code>voucher_code_id: int | None\n</code></pre> <p>The ID of the voucher code used when applying for the credit, if one was supplied.</p>"},{"location":"managers/credit.html#voucher_code_name","title":"<code>voucher_code_name</code>","text":"<pre><code>voucher_code_name: str | None\n</code></pre> <p>The name of the voucher code used when applying for the credit, if one was supplied.</p>"},{"location":"managers/credit.html#voucher_code","title":"<code>voucher_code</code>","text":"<pre><code>voucher_code: VoucherCode | None\n</code></pre> <p>The voucher code used when applying for the credit, if one was supplied.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/currency.html","title":"Currencies","text":"<p>This page documents how to use the manager and record objects for currencies.</p>"},{"location":"managers/currency.html#details","title":"Details","text":"Name Value Odoo Modules Base, Accounting Odoo Model Name <code>res.currency</code> Manager <code>currencies</code> Record Type <code>Currency</code>"},{"location":"managers/currency.html#manager","title":"Manager","text":"<p>The currency manager is available as the <code>currencies</code> attribute on the Odoo client object.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.currencies.get(1234)\nCurrency(record={'id': 1234, ...}, fields=None)\n</code></pre> <p>For more information on how to use managers, refer to Managers.</p>"},{"location":"managers/currency.html#record","title":"Record","text":"<p>The currency manager returns <code>Currency</code> record objects.</p> <p>To import the record class for type hinting purposes:</p> <pre><code>from openstack_odooclient import Currency\n</code></pre> <p>The record class currently implements the following fields and methods.</p> <p>For more information on attributes and methods common to all record types, see Record Attributes and Methods.</p>"},{"location":"managers/currency.html#active","title":"<code>active</code>","text":"<pre><code>active: bool\n</code></pre> <p>Whether or not this currency is active (enabled).</p>"},{"location":"managers/currency.html#currency_unit_label","title":"<code>currency_unit_label</code>","text":"<pre><code>currency_unit_label: str | Literal[False]\n</code></pre> <p>The unit label for this currency, if set.</p>"},{"location":"managers/currency.html#currency_subunit_label","title":"<code>currency_subunit_label</code>","text":"<pre><code>currency_subunit_label: str | Literal[False]\n</code></pre> <p>The sub-unit label for this currency, if set.</p>"},{"location":"managers/currency.html#date","title":"<code>date</code>","text":"<pre><code>date: date\n</code></pre> <p>The age of the set currency rate.</p>"},{"location":"managers/currency.html#decimal_places","title":"<code>decimal_places</code>","text":"<pre><code>decimal_places: int\n</code></pre> <p>Decimal places taken into account for operations on amounts in this currency.</p> <p>It is determined by the rounding factor (<code>rounding</code> field).</p>"},{"location":"managers/currency.html#name","title":"<code>name</code>","text":"<pre><code>name: str\n</code></pre> <p>The ISO-4217 currency code for the currency.</p>"},{"location":"managers/currency.html#position","title":"<code>position</code>","text":"<pre><code>position: Literal[\"before\", \"after\"]\n</code></pre> <p>The position of the currency unit relative to the amount.</p> <p>Values:</p> <ul> <li><code>before</code> - Place the unit before the amount</li> <li><code>after</code> - Place the unit after the amount</li> </ul>"},{"location":"managers/currency.html#rate","title":"<code>rate</code>","text":"<pre><code>rate: float\n</code></pre> <p>The rate of the currency to the currency of rate 1.</p>"},{"location":"managers/currency.html#rounding","title":"<code>rounding</code>","text":"<pre><code>rounding: float\n</code></pre> <p>The rounding factor configured for this currency.</p>"},{"location":"managers/currency.html#symbol","title":"<code>symbol</code>","text":"<pre><code>symbol: str\n</code></pre> <p>The currency sign to be used when printing amounts.</p>"},{"location":"managers/custom.html","title":"Custom Managers and Record Types","text":"<p>The OpenStack Odoo Client library supports defining new record types and adding managers for them to the Odoo client object, allowing for adding support for custom Odoo add-ons.</p> <p>Note</p> <p>When defining custom record types and managers, it is highly recommended to enable postponed evaluation of annotations by adding the following future import to the top of your Python source files:</p> <pre><code>from __future__ import annotations\n</code></pre> <p>If this is not enabled, circular imports are not supported, and you may encounter issues with undefined type hint objects.</p>"},{"location":"managers/custom.html#records","title":"Records","text":"<p>Odoo records are represented by record classes in the Odoo Client library.</p> <p>Record classes are implementations (subclasses) of the <code>RecordBase</code> class, which the record manager uses to create immutable objects for the record model.</p> <p>Record fields are defined as type hints on the record class. These type hints are parsed by the Odoo Client library, and field values from the API are automatically coerced to the correct types when referenced by applications.</p> <pre><code>from __future__ import annotations\n\nfrom openstack_odooclient import RecordBase\n\nclass CustomRecord(RecordBase):\n    custom_field: str\n    \"\"\"Description of the field.\"\"\"\n</code></pre>"},{"location":"managers/custom.html#field-types","title":"Field Types","text":"<p>The following basic field types from Odoo are supported.</p>"},{"location":"managers/custom.html#bool","title":"<code>bool</code>","text":"<p>Corresponds to the <code>Boolean</code> field type in Odoo.</p> <pre><code>from __future__ import annotations\n\nfrom openstack_odooclient import RecordBase\n\nclass CustomRecord(RecordBase):\n    custom_field: bool\n    \"\"\"Description of the field.\"\"\"\n</code></pre>"},{"location":"managers/custom.html#int","title":"<code>int</code>","text":"<p>Corresponds to the <code>Integer</code> field type in Odoo.</p> <pre><code>from __future__ import annotations\n\nfrom openstack_odooclient import RecordBase\n\nclass CustomRecord(RecordBase):\n    custom_field: int\n    \"\"\"Description of the field.\"\"\"\n</code></pre>"},{"location":"managers/custom.html#str","title":"<code>str</code>","text":"<p>Corresponds to the <code>Char</code> or <code>Text</code> field types in Odoo.</p> <pre><code>from __future__ import annotations\n\nfrom openstack_odooclient import RecordBase\n\nclass CustomRecord(RecordBase):\n    custom_field: str\n    \"\"\"Description of the field.\"\"\"\n</code></pre>"},{"location":"managers/custom.html#float","title":"<code>float</code>","text":"<p>Corresponds to the <code>Float</code> field type in Odoo.</p> <pre><code>from __future__ import annotations\n\nfrom openstack_odooclient import RecordBase\n\nclass CustomRecord(RecordBase):\n    custom_field: int\n    \"\"\"Description of the field.\"\"\"\n</code></pre>"},{"location":"managers/custom.html#date","title":"<code>date</code>","text":"<p>Corresponds to the <code>Date</code> field type in Odoo.</p> <pre><code>from __future__ import annotations\n\nfrom datetime import date\n\nfrom openstack_odooclient import RecordBase\n\nclass CustomRecord(RecordBase):\n    custom_field: date\n    \"\"\"Description of the field.\"\"\"\n</code></pre>"},{"location":"managers/custom.html#datetime","title":"<code>datetime</code>","text":"<p>Corresponds to the <code>DateTime</code> field type in Odoo.</p> <pre><code>from __future__ import annotations\n\nfrom datetime import datetime\n\nfrom openstack_odooclient import RecordBase\n\nclass CustomRecord(RecordBase):\n    custom_field: date\n    \"\"\"Description of the field.\"\"\"\n</code></pre>"},{"location":"managers/custom.html#literalvalue1","title":"<code>Literal[\"value1\", ...]</code>","text":"<p>Corresponds to the <code>Selection</code> field type in Odoo.</p> <p>Define all possible values for the field.</p> <pre><code>from __future__ import annotations\n\nfrom typing import Literal\n\nfrom openstack_odooclient import RecordBase\n\nclass CustomRecord(RecordBase):\n    custom_field: Literal[\"value1\", \"value2\", \"value3\"]\n    \"\"\"Description of the field.\n\n    Values:\n\n    * ``value1`` - Value 1\n    * ``value2`` - Value 2\n    * ``value3`` - Value 3\n    \"\"\"\n</code></pre>"},{"location":"managers/custom.html#optional-fields","title":"Optional Fields","text":"<p>Any supported field type can be made optional. Two types of optional fields are supported, depending on what Odoo returns when a field is not set.</p>"},{"location":"managers/custom.html#false","title":"<code>False</code>","text":"<p>The most common case is that <code>False</code> is returned, in which case the type hint should be defined as shown below.</p> <pre><code>from __future__ import annotations\n\nfrom typing import Literal, Union\n\nfrom openstack_odooclient import RecordBase\n\nclass CustomRecord(RecordBase):\n    custom_field: Union[str, Literal[False]]\n    \"\"\"Description of the field.\"\"\"\n</code></pre>"},{"location":"managers/custom.html#none","title":"<code>None</code>","text":"<p>If the default value is <code>None</code> when a field is not set, the type hint should be defined as shown below instead.</p> <pre><code>from __future__ import annotations\n\nfrom typing import Optional\n\nfrom openstack_odooclient import RecordBase\n\nclass CustomRecord(RecordBase):\n    custom_field: Optional[str]\n    \"\"\"Description of the field.\"\"\"\n</code></pre>"},{"location":"managers/custom.html#field-aliases","title":"Field Aliases","text":"<p>Aliases to other fields can be defined by adding the <code>FieldAlias</code> annotation to the field type hint. Aliases can be made for all supported field types, including model refs.</p> <p>Field aliases are resolved internally to fetch the value for the target field. They can also be used instead of the target field name when defining record search filters and creating new records.</p> <p>While not required, it is highly recommended that the target field also have a type hint defined for it on the model class. The type of the alias must match the type of the target field.</p> <pre><code>from __future__ import annotations\n\nfrom openstack_odooclient import FieldAlias, RecordBase\nfrom typing_extensions import Annotated\n\nclass CustomRecord(RecordBase):\n    custom_field: str\n    \"\"\"Description of the field.\"\"\"\n\n    field_alias: Annotated[str, FieldAlias(\"custom_field\")]\n    \"\"\"Alias for ``custom_field``.\"\"\"\n</code></pre>"},{"location":"managers/custom.html#model-refs","title":"Model Refs","text":"<p>Records in Odoo can reference other records to establish relationships between them, allowing for easier querying and management of multiple record types.</p> <p>The Odoo Client library supports a higher level interface for managing these relationships using the <code>ModelRef</code> type hint annotation.</p> <p>The <code>ModelRef</code> annotation takes two arguments: the name of the model ref field in Odoo, and the record class that implements the model in the Odoo Client library.</p> <p>There are two types of model refs that can be expressed on record classes: singular records, and record lists.</p>"},{"location":"managers/custom.html#singular-record-many2one","title":"Singular Record (Many2one)","text":"<p>Singular record model refs correspond to the <code>Many2one</code> relationship type in Odoo. With this relationship type, the model class references a single record.</p> <p>Suppose that we want to add a model ref for a <code>user_id</code> field to our record class, which references the <code>res.users</code> model (which is implemented as the <code>User</code> record class).</p> <p>There are three ways to reference fields of this type on the record class. All of these should all be defined on your record class.</p> <p>The first is to expose the record's ID directly as an integer.</p> <pre><code>from __future__ import annotations\n\nfrom openstack_odooclient import ModelRef, RecordBase, User\nfrom typing_extensions import Annotated\n\nclass CustomRecord(RecordBase):\n    user_id: Annotated[int, ModelRef(\"user_id\", User)]\n    \"\"\"ID for the user that owns this record.\"\"\"\n</code></pre> <p>The second is to expose the target record's display name as a string.</p> <pre><code>from __future__ import annotations\n\nfrom openstack_odooclient import ModelRef, RecordBase, User\nfrom typing_extensions import Annotated\n\nclass CustomRecord(RecordBase):\n    user_name: Annotated[str, ModelRef(\"user_id\", User)]\n    \"\"\"Name of the user that owns this record.\"\"\"\n</code></pre> <p>The third and final one is to define the target record itself as a record object.</p> <pre><code>from __future__ import annotations\n\nfrom openstack_odooclient import ModelRef, RecordBase, User\nfrom typing_extensions import Annotated\n\nclass CustomRecord(RecordBase):\n    user: Annotated[User, ModelRef(\"user_id\", User)]\n    \"\"\"The user that owns this record.\n\n    This fetches the full record from Odoo once,\n    and caches it for subsequent accesses.\n    \"\"\"\n</code></pre> <p>The target record ID and display name are always available on the containing record object, with no query required to retrieve their values.</p> <p>For performance reasons, the target record as an object is not fetched automatically. Instead, it is fetched from Odoo on demand when referenced for the first time (lazy loading). The resulting record object is then cached to ensure the same object is returned every time.</p> <p>The final result should be the following fields defined on your record class.</p> <pre><code>from __future__ import annotations\n\nfrom openstack_odooclient import ModelRef, RecordBase, User\nfrom typing_extensions import Annotated\n\nclass CustomRecord(RecordBase):\n    user_id: Annotated[int, ModelRef(\"user_id\", User)]\n    \"\"\"ID for the user that owns this record.\"\"\"\n\n    user_name: Annotated[str, ModelRef(\"user_id\", User)]\n    \"\"\"Name of the user that owns this record.\"\"\"\n\n    user: Annotated[User, ModelRef(\"user_id\", User)]\n    \"\"\"The user that owns this record.\n\n    This fetches the full record from Odoo once,\n    and caches it for subsequent accesses.\n    \"\"\"\n</code></pre> <p>Similar to field aliases, any of these model ref fields can be used instead of the target field name when defining record search filters and creating new records. The record ID or the record object can be passed directly to those methods (the record display name is not guaranteed to be unique, and thus, not accepted).</p> <p>Record references can be made optional by encasing the type hint with <code>Optional</code>. If the record reference is not set, <code>None</code> will be returned.</p> <pre><code>from __future__ import annotations\n\nfrom typing import Optional\n\nfrom openstack_odooclient import ModelRef, RecordBase, User\nfrom typing_extensions import Annotated\n\nclass CustomRecord(RecordBase):\n    user_id: Annotated[Optional[int], ModelRef(\"user_id\", User)]\n    \"\"\"ID for the user that owns this record.\"\"\"\n\n    user_name: Annotated[Optional[str], ModelRef(\"user_id\", User)]\n    \"\"\"Name of the user that owns this record.\"\"\"\n\n    user: Annotated[Optional[User], ModelRef(\"user_id\", User)]\n    \"\"\"The user that owns this record.\n\n    This fetches the full record from Odoo once,\n    and caches it for subsequent accesses.\n    \"\"\"\n</code></pre> <p>Recursive model refs are also supported using the <code>Self</code> type hint. In the below example, <code>Self</code> resolves to <code>CustomRecord</code>.</p> <pre><code>from __future__ import annotations\n\nfrom typing import Optional\n\nfrom openstack_odooclient import ModelRef, RecordBase\nfrom typing_extensions import Annotated, Self\n\nclass CustomRecord(RecordBase):\n    record_id: Annotated[Optional[int], ModelRef(\"user_id\", Self)]\n    \"\"\"ID for the record related to this one, if set..\"\"\"\n\n    record_name: Annotated[Optional[str], ModelRef(\"user_id\", Self)]\n    \"\"\"Name of the record related to this one, if set.\"\"\"\n\n    record: Annotated[Optional[Self], ModelRef(\"user_id\", Self)]\n    \"\"\"The record related to this one, if set.\n\n    This fetches the full record from Odoo once,\n    and caches it for subsequent accesses.\n    \"\"\"\n</code></pre>"},{"location":"managers/custom.html#record-lists-one2manymany2many","title":"Record Lists (One2many/Many2many)","text":"<p>Record list model refs correspond to the <code>One2many</code> and <code>Many2Many</code> relationship types in Odoo. With these relationship types, the model class references multiple records in a list structure.</p> <p>Suppose that we want to add a model ref for a <code>product_id</code> list field to our record class, which references the <code>product.product</code> model (which is implemented as the <code>Product</code> record class).</p> <p>There are two ways to reference fields of this type on the record class. All of these should all be defined on your record class.</p> <p>The first is to expose the record IDs directly as a list of integers.</p> <pre><code>from __future__ import annotations\n\nfrom typing import List\n\nfrom openstack_odooclient import ModelRef, RecordBase, Product\nfrom typing_extensions import Annotated\n\nclass CustomRecord(RecordBase):\n    product_ids: Annotated[List[int], ModelRef(\"product_id\", Product)]\n    \"\"\"The list of IDs for the products to use.\"\"\"\n</code></pre> <p>The second and final one is to expose the records as a list of record objects.</p> <pre><code>from __future__ import annotations\n\nfrom typing import List\n\nfrom openstack_odooclient import ModelRef, RecordBase, Product\nfrom typing_extensions import Annotated\n\nclass CustomRecord(RecordBase):\n    products: Annotated[List[Product], ModelRef(\"product_id\", Product)]\n    \"\"\"The list of products to use.\n\n    This fetches the full records from Odoo once,\n    and caches them for subsequent accesses.\n    \"\"\"\n</code></pre> <p>The target record IDs are always available on the containing record object, with no query required to retrieve their values.</p> <p>For performance reasons, the target record objects are not fetched automatically. Instead, they fetched from Odoo on demand when referenced for the first time (lazy loading). The resulting record objects are then cached to ensure the same objects are returned every time.</p> <p>The final result should be the following fields defined on your record class.</p> <pre><code>from __future__ import annotations\n\nfrom typing import List\n\nfrom openstack_odooclient import ModelRef, RecordBase, Product\nfrom typing_extensions import Annotated\n\nclass CustomRecord(RecordBase):\n    product_ids: Annotated[List[int], ModelRef(\"product_id\", Product)]\n    \"\"\"The list of IDs for the products to use.\"\"\"\n\n    products: Annotated[List[Product], ModelRef(\"product_id\", Product)]\n    \"\"\"The list of products to use.\n\n    This fetches the full records from Odoo once,\n    and caches them for subsequent accesses.\n    \"\"\"\n</code></pre> <p>Similar to field aliases, any of these model ref fields can be used instead of the target field name when defining record search filters and creating new records. The passed values (or lists of values) may consist of either record IDs, record objects, or any combination of the two.</p> <p>Recursive list model refs are also supported using the <code>Self</code> type hint. In the below example, <code>Self</code> resolves to <code>CustomRecord</code>.</p> <pre><code>from __future__ import annotations\n\nfrom typing import List\n\nfrom openstack_odooclient import ModelRef, RecordBase\nfrom typing_extensions import Annotated, Self\n\nclass CustomRecord(RecordBase):\n    child_ids: Annotated[List[int], ModelRef(\"child_id\", Self)]\n    \"\"\"The list of IDs for the child records.\"\"\"\n\n    children: Annotated[List[Self], ModelRef(\"child_id\", Self)]\n    \"\"\"The list of child records.\n\n    This fetches the full records from Odoo once,\n    and caches them for subsequent accesses.\n    \"\"\"\n</code></pre>"},{"location":"managers/custom.html#circular-model-refs","title":"Circular Model Refs","text":"<p>Due to the way type hints are dereferenced by Python, two record classes that reference each other are difficult (but not impossible) to support.</p> <p>Generally the following must be done for circular model refs to work:</p> <ul> <li>Postponed evaluation of annotations is enabled using <code>from __future__ import annotations</code></li> <li>Imports of the referenced model classes must be defined after the model classes   are defined in each source file</li> </ul> <p>Below is an example of two record classes that correctly reference each other.</p> parent.py<pre><code>from __future__ import annotations\n\nfrom typing import List\n\nfrom openstack_odooclient import ModelRef, RecordBase\nfrom typing_extensions import Annotated\n\nclass Parent(RecordBase):\n    child_ids: Annotated[List[int], ModelRef(\"child_id\", Child)]\n    \"\"\"The list of IDs for the children records.\"\"\"\n\n    children: Annotated[List[Parent], ModelRef(\"child_id\", Child)]\n    \"\"\"The list of children records.\n\n    This fetches the full records from Odoo once,\n    and caches them for subsequent accesses.\n    \"\"\"\n\nfrom .child import Child  # noqa: E402\n</code></pre> child.py<pre><code>from __future__ import annotations\n\nfrom typing import Optional\n\nfrom openstack_odooclient import ModelRef, RecordBase\nfrom typing_extensions import Annotated\n\nclass Child(RecordBase):\n    parent_id: Annotated[Optional[int], ModelRef(\"parent_id\", Parent)]\n    \"\"\"ID for the parent record, if it has one.\"\"\"\n\n    parent_name: Annotated[Optional[str], ModelRef(\"parent_id\", Parent)]\n    \"\"\"Name of the parent record, if it has one.\"\"\"\n\n    parent: Annotated[Optional[Parent], ModelRef(\"parent_id\", Parent)]\n    \"\"\"The parent record, if it has one.\n\n    This fetches the full record from Odoo once,\n    and caches it for subsequent accesses.\n    \"\"\"\n\nfrom .parent import Parent  # noqa: E402\n</code></pre>"},{"location":"managers/custom.html#odoo-version-compatibility","title":"Odoo Version Compatibility","text":"<p>Major releases of Odoo may change the database models to introduce new functionality.</p> <p>The way models usually change in a backwards-incompatible way is that fields are renamed so that they are referenced using another name, without providing an alias for the old one.</p> <p>In the OpenStack Odoo Client library, this is handled by defining the <code>_field_mapping</code> attribute on the record class.</p> <pre><code>_field_mapping: dict[str | None, dict[str, str]]\n</code></pre> <p>The <code>_field_mapping</code> attribute is a nested dictionary structure used to define local-to-remote field name mappings.</p> <pre><code>from __future__ import annotations\n\nfrom openstack_odooclient import RecordBase\n\nclass CustomRecord(RecordBase):\n    custom_field: str\n    \"\"\"Description of the field.\"\"\"\n\n    custom_field_2: int\n    \"\"\"Description of the second field.\"\"\"\n\n    custom_field_3: float\n    \"\"\"Description of the third field.\"\"\"\n\n    _field_mapping = {\n        # The Odoo version for which to generate the mapping.\n        \"13.0\": {\n            # Key is local field name. Value is the field name in Odoo 13.\n            \"custom_field\": \"old_custom_field\",\n        }\n        # Use None to provide a mapping to use for all Odoo versions.\n        None: {\n            \"custom_field_2\": \"old_custom_field_2\",\n        },\n        # custom_field_3 is not defined here.\n        # The field name will be used as-is on all Odoo versions.\n    }\n</code></pre> <p>Mappings can be added for specific Odoo versions, or by using <code>None</code>, mappings that apply to all Odoo versions can be defined.</p> <p>When the Odoo Client library interfaces with Odoo, it will automatically find and use the correct field name to present based on the server version and the record class's field mapping.</p>"},{"location":"managers/custom.html#record-methods","title":"Record Methods","text":"<p>Methods can be defined on record types to provide additional functionality.</p> <pre><code>from __future__ import annotations\n\nfrom openstack_odooclient import RecordBase\n\nclass CustomRecord(RecordBase):\n    custom_field: str\n    \"\"\"Description of the field.\"\"\"\n\n    def custom_field_is_defined(self) -&gt; bool:\n        return bool(self.custom_field)\n</code></pre> <p>In addition to all of the Odoo fields defined on the record class, the following internal attributes are also available for use in object methods:</p> <ul> <li><code>_client</code> (<code>Client</code>) - The Odoo client object the record was created from</li> <li><code>_manager</code> (<code>RecordManagerBase</code>) - The manager object the record was created from</li> <li><code>_records</code> (<code>MappingProxyType[str, Any]</code>) - The raw record fields from OdooRPC</li> <li><code>_fields</code> (<code>tuple[str, ...] | None</code>) - The fields that were selected during the query (or <code>None</code> for all fields)</li> <li><code>_odoo</code> (<code>odoorpc.ODOO</code>) - The OdooRPC connection object</li> <li><code>_env</code> (<code>odoorpc.env.Environment</code>) - The OdooRPC environment object for the model</li> </ul> <p>Note</p> <p>Record objects are intended to be immutable. Custom methods should not change the internal state, or the fields, of the record object.</p>"},{"location":"managers/custom.html#managers","title":"Managers","text":"<p>Manager classes are used to provide query methods and other functionality necessary for managing record objects in the Odoo Client library.</p> <p>Once you have defined your record class, a manager class must be created for implementing the query methods for the record class.</p>"},{"location":"managers/custom.html#creating-a-manager-class","title":"Creating a Manager Class","text":"<p>Manager classes are subclasses of the generic <code>RecordManagerBase</code> class, specifying the record class the generic type argument, and defining the following class attributes:</p> <ul> <li><code>env_name</code> (<code>str</code>) - The name of the Odoo environment (database model) for the record class</li> <li><code>record_class</code> (<code>Type[T]</code>) - The record class to use to create record objects (must be the same class as the one specified in the generic subclass definition)</li> </ul> <p>The following optional class attributes are also available:</p> <ul> <li><code>default_fields</code> (<code>tuple[str, ...] | None</code>) - A set of fields to select by default in queries   if a field list is not supplied (default is <code>None</code> to select all fields)</li> </ul> <p>Below is a simple example of a custom record type and its manager class.</p> <pre><code>from __future__ import annotations\n\nfrom typing import List, Union\n\nfrom openstack_odooclient import RecordBase, RecordManagerBase\n\nclass CustomRecord(RecordBase):\n    custom_field: str\n    \"\"\"Description of the field.\"\"\"\n\nclass CustomRecordManager(RecordManagerBase[CustomRecord]):\n    env_name = \"custom.record\"\n    record_class = CustomRecord\n</code></pre>"},{"location":"managers/custom.html#using-a-manager-class","title":"Using a Manager Class","text":"<p>There are two ways of using manager classes. The first is to simply create a manager object, passing the <code>Client</code> object as the sole argument.</p> <p>This will allow manager methods to be used by calling them on the manager object.</p> <pre><code>from __future__ import annotations\n\nfrom typing import List, Union\n\nfrom openstack_odooclient import Client, RecordBase, RecordManagerBase\n\nclass CustomRecord(RecordBase):\n    custom_field: str\n    \"\"\"Description of the field.\"\"\"\n\nclass CustomRecordManager(RecordManagerBase[CustomRecord]):\n    env_name = \"custom.record\"\n    record_class = CustomRecord\n\nodoo_client = Client(...)\ncustom_records = CustomRecordManager(odoo_client)\n</code></pre> <p>This will work perfectly fine, but the disadvantage of using this method is that the client and manager objects are managed as two separate variables.</p> <p>To create a single object from which you can manage all of your custom types and managers, subclass the <code>Client</code> class, and add a type hint for your custom manager class.</p> <pre><code>from __future__ import annotations\n\nfrom typing import List, Union\n\nfrom openstack_odooclient import RecordBase, RecordManagerBase\n\nclass CustomRecord(RecordBase):\n    custom_field: str\n    \"\"\"Description of the field.\"\"\"\n\nclass CustomRecordManager(RecordManagerBase[CustomRecord]):\n    env_name = \"custom.record\"\n    record_class = CustomRecord\n\nclass CustomClient(Client):\n    custom_records: CustomRecordManager\n</code></pre> <p>This adds the record manager to the client class, allowing you to reference it on client objects created from it.</p> <pre><code>&gt;&gt;&gt; odoo_client = CustomClient(...)\n&gt;&gt;&gt; odoo_client.custom_records.get(1234)\nCustomRecord(record={'id' 1234, 'custom_record': 'Hello, world!'}, fields=None)\n</code></pre>"},{"location":"managers/custom.html#manager-methods","title":"Manager Methods","text":"<p>Methods can be defined on manager classes to provide additional functionality.</p> <pre><code>from __future__ import annotations\n\nfrom typing import List, Union\n\nfrom openstack_odooclient import RecordBase, RecordManagerBase\n\nclass CustomRecord(RecordBase):\n    custom_field: str\n    \"\"\"Description of the field.\"\"\"\n\nclass CustomRecordManager(RecordManagerBase[CustomRecord]):\n    env_name = \"custom.record\"\n    record_class = CustomRecord\n\n    def search_by_custom_field(self, custom_field: str) -&gt; List[Record]:\n        return self.search([(\"custom_field\", \"ilike\", custom_field)])\n\n    def perform_action(self, custom_record: Union[int, CustomRecord]) -&gt; None:\n        self._env.perform_action(\n            (\n                custom_record.id\n                if isinstance(custom_record, CustomRecord)\n                else custom_record\n            ),\n        )\n</code></pre> <p>The following internal attributes are also available for use in methods:</p> <ul> <li><code>env_name</code> (<code>str</code>) - The name of the Odoo environment (database model) for the record class</li> <li><code>record_class</code> (<code>Type[T]</code>) - The record class object</li> <li><code>default_fields</code> (<code>tuple[str, ...] | None</code>) - The default list of fields to fetch on queries (or <code>None</code> to fetch all)</li> <li><code>_client</code> (<code>Client</code>) - The Odoo client object the record manager uses</li> <li><code>_odoo</code> (<code>odoorpc.ODOO</code>) - The OdooRPC connection object</li> <li><code>_env</code> (<code>odoorpc.env.Environment</code>) - The OdooRPC environment object for the model</li> </ul>"},{"location":"managers/custom.html#extending-existing-record-types","title":"Extending Existing Record Types","text":"<p>The Odoo Client library provides limited support for extending the built-in record types.</p> <p>It is possible to subclass built-in record types, and create custom record managers that manage this record class.</p> <pre><code>from __future__ import annotations\n\nfrom openstack_odooclient import Client, RecordManagerBase, User, UserManager\n\nclass CustomUser(User):\n    custom_field: str\n    \"\"\"Description of the field.\"\"\"\n\nclass CustomUserManager(RecordManagerBase[CustomUser]):\n    env_name = UserManager.env_name\n    record_class = CustomUser\n\nclass CustomClient(Client):\n    custom_users: CustomUserManager\n</code></pre> <p>Due to the Odoo Client library using type hints to determine what record classes to use, and the type hints being physically defined in code to allow type analysis tools such as Mypy and Pyright to properly evaluate the source, existing references on existing record classes cannot be automatically updated to use the custom versions.</p> <p>However, it is possible to cast a record object of the base type into the custom type using the record class's <code>from_record_obj</code> class method.</p> <pre><code>&gt;&gt;&gt; odoo_client = CustomClient(...)\n&gt;&gt;&gt; user = odoo_client.users.get(1234)\n&gt;&gt;&gt; user\nUser(record={'id': 1234, 'custom_field': 'Hello, world!', ...}, fields=None)\n&gt;&gt;&gt; custom_user = CustomUser.from_record_obj(user)\n&gt;&gt;&gt; custom_user\nCustomUser(record={'id': 1234, 'custom_field': 'Hello, world!', ...}, fields=None)\n&gt;&gt;&gt; custom_user.custom_field\n'Hello, world!'\n</code></pre> <p>This should cover the majority of use cases where custom add-ons add new functionality to existing models.</p>"},{"location":"managers/customer-group.html","title":"OpenStack Customer Groups","text":"<p>This page documents how to use the manager and record objects for customer groups.</p>"},{"location":"managers/customer-group.html#details","title":"Details","text":"Name Value Odoo Modules OpenStack Integration Odoo Model Name <code>openstack.customer_group</code> Manager <code>customer_groups</code> Record Type <code>CustomerGroup</code>"},{"location":"managers/customer-group.html#manager","title":"Manager","text":"<p>The customer group manager is available as the <code>customer_groups</code> attribute on the Odoo client object.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.customer_groups.get(1234)\nCustomerGroup(record={'id': 1234, ...}, fields=None)\n</code></pre> <p>For more information on how to use managers, refer to Managers.</p>"},{"location":"managers/customer-group.html#record","title":"Record","text":"<p>The customer group manager returns <code>CustomerGroup</code> record objects.</p> <p>To import the record class for type hinting purposes:</p> <pre><code>from openstack_odooclient import CustomerGroup\n</code></pre> <p>The record class currently implements the following fields and methods.</p> <p>For more information on attributes and methods common to all record types, see Record Attributes and Methods.</p>"},{"location":"managers/customer-group.html#name","title":"<code>name</code>","text":"<pre><code>name: str\n</code></pre> <p>The name of the customer group.</p>"},{"location":"managers/customer-group.html#partner_ids","title":"<code>partner_ids</code>","text":"<pre><code>partner_ids: list[int]\n</code></pre> <p>A list of IDs for the partners that are part of this customer group.</p>"},{"location":"managers/customer-group.html#partners","title":"<code>partners</code>","text":"<pre><code>partners: list[partner.Partner]\n</code></pre> <p>The partners that are part of this customer group.</p> <p>This fetches the full records from Odoo once, and caches them for subsequent accesses.</p>"},{"location":"managers/customer-group.html#pricelist_id","title":"<code>pricelist_id</code>","text":"<pre><code>pricelist_id: int | None\n</code></pre> <p>The ID for the pricelist this customer group uses, if not the default one.</p>"},{"location":"managers/customer-group.html#pricelist_name","title":"<code>pricelist_name</code>","text":"<pre><code>pricelist_name: str | None\n</code></pre> <p>The name of the pricelist this customer group uses, if not the default one.</p>"},{"location":"managers/customer-group.html#pricelist","title":"<code>pricelist</code>","text":"<pre><code>pricelist: Pricelist | None\n</code></pre> <p>The pricelist this customer group uses, if not the default one.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/grant-type.html","title":"OpenStack Grant Types","text":"<p>This page documents how to use the manager and record objects for grant types.</p>"},{"location":"managers/grant-type.html#details","title":"Details","text":"Name Value Odoo Modules OpenStack Integration Odoo Model Name <code>openstack.grant.type</code> Manager <code>grant_types</code> Record Type <code>GrantType</code>"},{"location":"managers/grant-type.html#manager","title":"Manager","text":"<p>The grant type manager is available as the <code>grant_types</code> attribute on the Odoo client object.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.grant_types.get(1234)\nGrantType(record={'id': 1234, ...}, fields=None)\n</code></pre> <p>For more information on how to use managers, refer to Managers.</p>"},{"location":"managers/grant-type.html#record","title":"Record","text":"<p>The grant type manager returns <code>GrantType</code> record objects.</p> <p>To import the record class for type hinting purposes:</p> <pre><code>from openstack_odooclient import GrantType\n</code></pre> <p>The record class currently implements the following fields and methods.</p> <p>For more information on attributes and methods common to all record types, see Record Attributes and Methods.</p>"},{"location":"managers/grant-type.html#grant_ids","title":"<code>grant_ids</code>","text":"<pre><code>grant_ids: list[int]\n</code></pre> <p>A list of IDs for the grants which are of this grant type.</p>"},{"location":"managers/grant-type.html#grants","title":"<code>grants</code>","text":"<pre><code>grants: list[Grant]\n</code></pre> <p>A list of grants which are of this grant type.</p> <p>This fetches the full records from Odoo once, and caches them for subsequent accesses.</p>"},{"location":"managers/grant-type.html#name","title":"<code>name</code>","text":"<pre><code>name: str\n</code></pre> <p>Name of the Grant Type.</p>"},{"location":"managers/grant-type.html#only_for_product_ids","title":"<code>only_for_product_ids</code>","text":"<pre><code>only_for_product_ids: list[int]\n</code></pre> <p>A list of IDs for the products this grant applies to.</p> <p>Mutually exclusive with <code>only_for_product_category_ids</code>. If neither are specified, the grant applies to all products.</p>"},{"location":"managers/grant-type.html#only_for_products","title":"<code>only_for_products</code>","text":"<pre><code>only_for_products: list[Product]\n</code></pre> <p>A list of products which this grant applies to.</p> <p>Mutually exclusive with <code>only_for_product_categories</code>. If neither are specified, the grant applies to all products.</p> <p>This fetches the full records from Odoo once, and caches them for subsequent accesses.</p>"},{"location":"managers/grant-type.html#only_for_product_category_ids","title":"<code>only_for_product_category_ids</code>","text":"<pre><code>only_for_product_category_ids: list[int]\n</code></pre> <p>A list of IDs for the product categories this grant applies to.</p> <p>Mutually exclusive with <code>only_for_product_ids</code>. If neither are specified, the grant applies to all product categories.</p>"},{"location":"managers/grant-type.html#only_for_product_categories","title":"<code>only_for_product_categories</code>","text":"<pre><code>only_for_product_categories: list[ProductCategory]\n</code></pre> <p>A list of product categories which this grant applies to.</p> <p>Mutually exclusive with <code>only_for_products</code>. If neither are specified, the grant applies to all product categories.</p> <p>This fetches the full records from Odoo once, and caches them for subsequent accesses.</p>"},{"location":"managers/grant-type.html#only_on_group_root","title":"<code>only_on_group_root</code>","text":"<pre><code>only_on_group_root: bool\n</code></pre> <p>When set to <code>True</code>, this grant type is only allowed to be part of an invoice grouping if it is on the group root project.</p>"},{"location":"managers/grant-type.html#product_id","title":"<code>product_id</code>","text":"<pre><code>product_id: int\n</code></pre> <p>The ID of the product to use when applying the grant to invoices.</p>"},{"location":"managers/grant-type.html#product_nane","title":"<code>product_nane</code>","text":"<pre><code>product_name: str\n</code></pre> <p>The name of the product to use when applying the grant to invoices.</p>"},{"location":"managers/grant-type.html#product","title":"<code>product</code>","text":"<pre><code>product: Product\n</code></pre> <p>The product to use when applying the grant to invoices.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/grant.html","title":"OpenStack Grants","text":"<p>This page documents how to use the manager and record objects for grants.</p>"},{"location":"managers/grant.html#details","title":"Details","text":"Name Value Odoo Modules OpenStack Integration Odoo Model Name <code>openstack.grant</code> Manager <code>grants</code> Record Type <code>Grant</code>"},{"location":"managers/grant.html#manager","title":"Manager","text":"<p>The grant manager is available as the <code>grants</code> attribute on the Odoo client object.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.grants.get(1234)\nGrant(record={'id': 1234, ...}, fields=None)\n</code></pre> <p>For more information on how to use managers, refer to Managers.</p>"},{"location":"managers/grant.html#record","title":"Record","text":"<p>The grant manager returns <code>Grant</code> record objects.</p> <p>To import the record class for type hinting purposes:</p> <pre><code>from openstack_odooclient import Grant\n</code></pre> <p>The record class currently implements the following fields and methods.</p> <p>For more information on attributes and methods common to all record types, see Record Attributes and Methods.</p>"},{"location":"managers/grant.html#expiry_date","title":"<code>expiry_date</code>","text":"<pre><code>expiry_date: date\n</code></pre> <p>The date the grant expires.</p>"},{"location":"managers/grant.html#grant_type_id","title":"<code>grant_type_id</code>","text":"<pre><code>grant_type_id: int\n</code></pre> <p>The ID of the type of this grant.</p>"},{"location":"managers/grant.html#grant_type_name","title":"<code>grant_type_name</code>","text":"<pre><code>grant_type_name: str\n</code></pre> <p>The name of the type of this grant.</p>"},{"location":"managers/grant.html#grant_type","title":"<code>grant_type</code>","text":"<pre><code>grant_type: GrantType\n</code></pre> <p>The type of this grant.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/grant.html#name","title":"<code>name</code>","text":"<pre><code>name: str\n</code></pre> <p>The automatically generated name of the grant.</p>"},{"location":"managers/grant.html#start_date","title":"<code>start_date</code>","text":"<pre><code>start_date: date\n</code></pre> <p>The start date of the grant.</p>"},{"location":"managers/grant.html#value","title":"<code>value</code>","text":"<pre><code>value: float\n</code></pre> <p>The value of this grant.</p>"},{"location":"managers/grant.html#voucher_code_id","title":"<code>voucher_code_id</code>","text":"<pre><code>voucher_code_id: int | None\n</code></pre> <p>The ID of the voucher code used when applying for the grant, if one was supplied.</p>"},{"location":"managers/grant.html#voucher_code_name","title":"<code>voucher_code_name</code>","text":"<pre><code>voucher_code_name: str | None\n</code></pre> <p>The name of the voucher code used when applying for the grant, if one was supplied.</p>"},{"location":"managers/grant.html#voucher_code","title":"<code>voucher_code</code>","text":"<pre><code>voucher_code: VoucherCode | None\n</code></pre> <p>The voucher code used when applying for the grant, if one was supplied.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/partner-category.html","title":"Partner Categories","text":"<p>This page documents how to use the manager and record objects for partner categories.</p>"},{"location":"managers/partner-category.html#details","title":"Details","text":"Name Value Odoo Modules Base Odoo Model Name <code>res.partner.category</code> Manager <code>partner_categories</code> Record Type <code>PartnerCategory</code>"},{"location":"managers/partner-category.html#manager","title":"Manager","text":"<p>The partner category manager is available as the <code>partner_categories</code> attribute on the Odoo client object.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.partner_categories.get(1234)\nPartnerCategory(record={'id': 1234, ...}, fields=None)\n</code></pre> <p>For more information on how to use managers, refer to Managers.</p>"},{"location":"managers/partner-category.html#record","title":"Record","text":"<p>The partner category manager returns <code>PartnerCategory</code> record objects.</p> <p>To import the record class for type hinting purposes:</p> <pre><code>from openstack_odooclient import PartnerCategory\n</code></pre> <p>The record class currently implements the following fields and methods.</p> <p>For more information on attributes and methods common to all record types, see Record Attributes and Methods.</p>"},{"location":"managers/partner-category.html#active","title":"<code>active</code>","text":"<pre><code>active: bool\n</code></pre> <p>Whether or not this partner category is active (enabled).</p>"},{"location":"managers/partner-category.html#child_ids","title":"<code>child_ids</code>","text":"<pre><code>child_ids: list[int]\n</code></pre> <p>A list of IDs for the child categories.</p>"},{"location":"managers/partner-category.html#children","title":"<code>children</code>","text":"<pre><code>children: list[PartnerCategory]\n</code></pre> <p>The list of child categories.</p> <p>This fetches the full records from Odoo once, and caches them for subsequent accesses.</p>"},{"location":"managers/partner-category.html#color","title":"<code>color</code>","text":"<pre><code>color: int\n</code></pre> <p>Colour index for the partner category.</p>"},{"location":"managers/partner-category.html#colour","title":"<code>colour</code>","text":"<pre><code>colour: int\n</code></pre> <p>Alias for <code>color</code>.</p>"},{"location":"managers/partner-category.html#name","title":"<code>name</code>","text":"<pre><code>name: str\n</code></pre> <p>The name of the partner category.</p>"},{"location":"managers/partner-category.html#parent_id","title":"<code>parent_id</code>","text":"<pre><code>parent_id: int | None\n</code></pre> <p>The ID for the parent partner category, if this category is the child of another category.</p>"},{"location":"managers/partner-category.html#parent_name","title":"<code>parent_name</code>","text":"<pre><code>parent_name: str | None\n</code></pre> <p>The name of the parent partner category, if this category is the child of another category.</p>"},{"location":"managers/partner-category.html#parent","title":"<code>parent</code>","text":"<pre><code>parent: ParentCategory | None\n</code></pre> <p>The parent partner category, if this category is the child of another category.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/partner-category.html#parent_path","title":"<code>parent_path</code>","text":"<pre><code>parent_path: str | Literal[False]\n</code></pre> <p>The path of the parent partner category, if there is a parent.</p>"},{"location":"managers/partner-category.html#partner_ids","title":"<code>partner_ids</code>","text":"<pre><code>partner_ids: list[int]\n</code></pre> <p>A list of IDs for the partners in this category.</p>"},{"location":"managers/partner-category.html#partners","title":"<code>partners</code>","text":"<pre><code>partners: list[Partner]\n</code></pre> <p>The list of partners in this category.</p> <p>This fetches the full records from Odoo once, and caches them for subsequent accesses.</p>"},{"location":"managers/partner.html","title":"Partners","text":"<p>This page documents how to use the manager and record objects for partners.</p>"},{"location":"managers/partner.html#details","title":"Details","text":"Name Value Odoo Modules Base, Product, Sales, OpenStack Integration Odoo Model Name <code>res.partner</code> Manager <code>partners</code> Record Type <code>Partner</code>"},{"location":"managers/partner.html#manager","title":"Manager","text":"<p>The partner manager is available as the <code>partners</code> attribute on the Odoo client object.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.partners.get(1234)\nPartner(record={'id': 1234, ...}, fields=None)\n</code></pre> <p>For more information on how to use managers, refer to Managers.</p>"},{"location":"managers/partner.html#record","title":"Record","text":"<p>The partner manager returns <code>Partner</code> record objects.</p> <p>To import the record class for type hinting purposes:</p> <pre><code>from openstack_odooclient import Partner\n</code></pre> <p>The record class currently implements the following fields and methods.</p> <p>For more information on attributes and methods common to all record types, see Record Attributes and Methods.</p>"},{"location":"managers/partner.html#active","title":"<code>active</code>","text":"<pre><code>active: bool\n</code></pre> <p>Whether or not this partner is active (enabled).</p>"},{"location":"managers/partner.html#company_id","title":"<code>company_id</code>","text":"<pre><code>company_id: int\n</code></pre> <p>The ID for the company this partner is owned by.</p>"},{"location":"managers/partner.html#company_name","title":"<code>company_name</code>","text":"<pre><code>company_name: str\n</code></pre> <p>The name of the company this partner is owned by.</p>"},{"location":"managers/partner.html#company","title":"<code>company</code>","text":"<pre><code>company: Company\n</code></pre> <p>The company this partner is owned by.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/partner.html#email","title":"<code>email</code>","text":"<pre><code>email: str\n</code></pre> <p>Main e-mail address for the partner.</p>"},{"location":"managers/partner.html#name","title":"<code>name</code>","text":"<pre><code>name: str\n</code></pre> <p>Full name of the partner.</p>"},{"location":"managers/partner.html#os_customer_group_id","title":"<code>os_customer_group_id</code>","text":"<pre><code>os_customer_group_id: int | None\n</code></pre> <p>The ID for the customer group this partner is part of, if it is part of one.</p>"},{"location":"managers/partner.html#os_customer_group_name","title":"<code>os_customer_group_name</code>","text":"<pre><code>os_customer_group_name: str | None\n</code></pre> <p>The name of the customer group this partner is part of, if it is part of one.</p>"},{"location":"managers/partner.html#os_customer_group","title":"<code>os_customer_group</code>","text":"<pre><code>os_customer_group: CustomerGroup\n</code></pre> <p>The customer group this partner is part of, if it is part of one.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/partner.html#os_project_ids","title":"<code>os_project_ids</code>","text":"<pre><code>os_project_ids: list[int]\n</code></pre> <p>A list of IDs for the OpenStack projects that belong to this partner.</p>"},{"location":"managers/partner.html#os_projects","title":"<code>os_projects</code>","text":"<pre><code>os_projects: list[project.Project]\n</code></pre> <p>The OpenStack projects that belong to this partner.</p> <p>This fetches the full records from Odoo once, and caches them for subsequent accesses.</p>"},{"location":"managers/partner.html#os_project_contact_ids","title":"<code>os_project_contact_ids</code>","text":"<pre><code>os_project_contact_ids: list[int]\n</code></pre> <p>A list of IDs for the project contacts that are associated with this partner.</p>"},{"location":"managers/partner.html#os_project_contacts","title":"<code>os_project_contacts</code>","text":"<pre><code>os_project_contacts: list[ProjectContact]\n</code></pre> <p>The project contacts that are associated with this partner.</p> <p>This fetches the full records from Odoo once, and caches them for subsequent accesses.</p>"},{"location":"managers/partner.html#os_referral_id","title":"<code>os_referral_id</code>","text":"<pre><code>os_referral_id: int | None\n</code></pre> <p>The ID for the referral code the partner used on sign-up, if one was used.</p> <p>return self._get_ref_id(\"os_referral\", optional=True)</p>"},{"location":"managers/partner.html#os_referral_name","title":"<code>os_referral_name</code>","text":"<pre><code>os_referral_name: str | None\n</code></pre> <p>The name of the referral code the partner used on sign-up, if one was used.</p>"},{"location":"managers/partner.html#os_referral","title":"<code>os_referral</code>","text":"<pre><code>os_referral: ReferralCode\n</code></pre> <p>The referral code the partner used on sign-up, if one was used.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/partner.html#os_referral_code_ids","title":"<code>os_referral_code_ids</code>","text":"<pre><code>os_referral_code_ids: list[int]\n</code></pre> <p>A list of IDs for the referral codes the partner has used.</p>"},{"location":"managers/partner.html#os_referral_codes","title":"<code>os_referral_codes</code>","text":"<pre><code>os_referral_codes: list[ReferralCode]\n</code></pre> <p>The referral codes the partner has used.</p> <p>This fetches the full records from Odoo once, and caches them for subsequent accesses.</p>"},{"location":"managers/partner.html#os_reseller_id","title":"<code>os_reseller_id</code>","text":"<pre><code>os_reseller_id: int | None\n</code></pre> <p>The ID for the reseller for this partner, if this partner is billed through a reseller.</p>"},{"location":"managers/partner.html#os_reseller_name","title":"<code>os_reseller_name</code>","text":"<pre><code>os_reseller_name: str | None\n</code></pre> <p>The name of the reseller for this partner, if this partner is billed through a reseller.</p>"},{"location":"managers/partner.html#os_reseller","title":"<code>os_reseller</code>","text":"<pre><code>os_reseller: Reseller | None\n</code></pre> <p>The reseller for this partner, if this partner is billed through a reseller.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/partner.html#os_trial_id","title":"<code>os_trial_id</code>","text":"<pre><code>os_trial_id: int | None\n</code></pre> <p>The ID for the sign-up trial for this partner, if signed up under a trial.</p>"},{"location":"managers/partner.html#os_trial_name","title":"<code>os_trial_name</code>","text":"<pre><code>os_trial_name: str | None\n</code></pre> <p>The name of the sign-up trial for this partner, if signed up under a trial.</p>"},{"location":"managers/partner.html#os_trial","title":"<code>os_trial</code>","text":"<pre><code>os_trial: Trial | None\n</code></pre> <p>The sign-up trial for this partner, if signed up under a trial.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/partner.html#parent_id","title":"<code>parent_id</code>","text":"<pre><code>parent_id: int | None\n</code></pre> <p>The ID for the parent partner of this partner, if it has a parent.</p>"},{"location":"managers/partner.html#parent_name","title":"<code>parent_name</code>","text":"<pre><code>parent_name: str | None\n</code></pre> <p>The name of the parent partner of this partner, if it has a parent.</p>"},{"location":"managers/partner.html#parent","title":"<code>parent</code>","text":"<pre><code>parent: Partner | None\n</code></pre> <p>The parent partner of this partner, if it has a parent.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/partner.html#property_product_pricelist_id","title":"<code>property_product_pricelist_id</code>","text":"<pre><code>property_product_pricelist_id: int | None\n</code></pre> <p>The ID for the pricelist this partner uses, if explicitly set.</p> <p>If not set, the pricelist set for the customer group is used (and if that is not set, the global default pricelist is used).</p>"},{"location":"managers/partner.html#property_product_pricelist_name","title":"<code>property_product_pricelist_name</code>","text":"<pre><code>property_product_pricelist_name: str | None\n</code></pre> <p>The name of the pricelist this partner uses, if explicitly set.</p> <p>If not set, the pricelist set for the customer group is used (and if that is not set, the global default pricelist is used).</p>"},{"location":"managers/partner.html#property_product_pricelist","title":"<code>property_product_pricelist</code>","text":"<pre><code>property_product_pricelist: Pricelist | None\n</code></pre> <p>The pricelist this partner uses, if explicitly set.</p> <p>If not set, the pricelist set for the customer group is used (and if that is not set, the global default pricelist is used).</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/partner.html#stripe_customer_id","title":"<code>stripe_customer_id</code>","text":"<pre><code>stripe_customer_id: str | Literal[False]\n</code></pre> <p>Stripe customer ID for this partner, if one has been assigned.</p>"},{"location":"managers/partner.html#user_id","title":"<code>user_id</code>","text":"<pre><code>user_id: int | None\n</code></pre> <p>The ID of the internal user associated with this partner, if one is assigned.</p>"},{"location":"managers/partner.html#user_name","title":"<code>user_name</code>","text":"<pre><code>user_name: str | None\n</code></pre> <p>The name of the internal user associated with this partner, if one is assigned.</p>"},{"location":"managers/partner.html#user","title":"<code>user</code>","text":"<pre><code>user: User | None\n</code></pre> <p>The internal user associated with this partner, if one is assigned.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/pricelist.html","title":"Pricelists","text":"<p>This page documents how to use the manager and record objects for pricelists.</p>"},{"location":"managers/pricelist.html#details","title":"Details","text":"Name Value Odoo Modules Product Odoo Model Name <code>product.pricelist</code> Manager <code>pricelists</code> Record Type <code>Pricelist</code>"},{"location":"managers/pricelist.html#manager","title":"Manager","text":"<p>The partner manager is available as the <code>pricelists</code> attribute on the Odoo client object.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.pricelists.get(1234)\nPricelist(record={'id': 1234, ...}, fields=None)\n</code></pre> <p>For more information on how to use managers, refer to Managers.</p> <p>The following manager methods are also available, in addition to the standard methods.</p>"},{"location":"managers/pricelist.html#get_price","title":"<code>get_price</code>","text":"<pre><code>def get_price(\n    pricelist: int | Pricelist,\n    product: int | Product,\n    qty: float,\n) -&gt; float\n</code></pre> <p>Get the price to charge for a given pricelist, product and quantity.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.pricelists.get_price(\n...     pricelist=1234,  # ID or object\n...     product=5678,  # ID or object\n...     qty=100,\n... )\n2.5\n</code></pre>"},{"location":"managers/pricelist.html#parameters","title":"Parameters","text":"Name Type Description Default <code>pricelist</code> <code>int | Pricelist</code> Pricelist to reference (ID or object) (required) <code>product</code> <code>int | Product</code> Product to get the price for (ID or object) (required) <code>qty</code> <code>float</code> Quantity to charge for (required)"},{"location":"managers/pricelist.html#returns","title":"Returns","text":"Type Description <code>float</code> Price to charge"},{"location":"managers/pricelist.html#record","title":"Record","text":"<p>The partner manager returns <code>Partner</code> record objects.</p> <p>To import the record class for type hinting purposes:</p> <pre><code>from openstack_odooclient import Partner\n</code></pre> <p>The record class currently implements the following fields and methods.</p> <p>For more information on attributes and methods common to all record types, see Record Attributes and Methods.</p>"},{"location":"managers/pricelist.html#active","title":"<code>active</code>","text":"<pre><code>active: bool\n</code></pre> <p>Whether or not this partner is active (enabled).</p>"},{"location":"managers/pricelist.html#company_id","title":"<code>company_id</code>","text":"<pre><code>company_id: int | None\n</code></pre> <p>The ID for the company for this pricelist, if set.</p>"},{"location":"managers/pricelist.html#company_name","title":"<code>company_name</code>","text":"<pre><code>company_name: str | None\n</code></pre> <p>The name of the company for this pricelist, if set.</p>"},{"location":"managers/pricelist.html#company","title":"<code>company</code>","text":"<pre><code>company: Company | None\n</code></pre> <p>The company for this pricelist, if set.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/pricelist.html#currency_id","title":"<code>currency_id</code>","text":"<pre><code>currency_id: int\n</code></pre> <p>The ID for the currency used in this pricelist.</p>"},{"location":"managers/pricelist.html#currency_name","title":"<code>currency_name</code>","text":"<pre><code>currency_name: str\n</code></pre> <p>The name of the currency used in this pricelist.</p>"},{"location":"managers/pricelist.html#currency","title":"<code>currency</code>","text":"<pre><code>currency: Currency\n</code></pre> <p>The currency used in this pricelist.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/pricelist.html#discount_policy","title":"<code>discount_policy</code>","text":"<pre><code>discount_policy: Literal[\"with_discount\", \"without_discount\"]\n</code></pre> <p>Discount policy for the pricelist.</p> <p>Values:</p> <ul> <li><code>with_discount</code> - Discount included in the price</li> <li><code>without_discount</code> - Show public price &amp; discount to the customer</li> </ul>"},{"location":"managers/pricelist.html#name","title":"<code>name</code>","text":"<pre><code>name: str\n</code></pre> <p>The name of this pricelist.</p>"},{"location":"managers/pricelist.html#get_price_1","title":"<code>get_price</code>","text":"<pre><code>def get_price(\n    product: int | Product,\n    qty: float,\n) -&gt; float\n</code></pre> <p>Get the price to charge for a given product and quantity.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; pricelist = odoo_client.pricelists.get(1234)\n&gt;&gt;&gt; pricelist.get_price(\n...     product=5678,  # ID or object\n...     qty=100,\n... )\n2.5\n</code></pre>"},{"location":"managers/pricelist.html#parameters_1","title":"Parameters","text":"Name Type Description Default <code>product</code> <code>int | Product</code> Product to get the price for (ID or object) (required) <code>qty</code> <code>float</code> Quantity to charge for (required)"},{"location":"managers/pricelist.html#returns_1","title":"Returns","text":"Type Description <code>float</code> Price to charge"},{"location":"managers/product-category.html","title":"Product Categories","text":"<p>This page documents how to use the manager and record objects for product categories.</p>"},{"location":"managers/product-category.html#details","title":"Details","text":"Name Value Odoo Modules Product, Accounting Odoo Model Name <code>product.category</code> Manager <code>product_categories</code> Record Type <code>ProductCategory</code>"},{"location":"managers/product-category.html#manager","title":"Manager","text":"<p>The product category manager is available as the <code>product_categories</code> attribute on the Odoo client object.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.product_categories.get(1234)\nProductCategory(record={'id': 1234, ...}, fields=None)\n</code></pre> <p>For more information on how to use managers, refer to Managers.</p>"},{"location":"managers/product-category.html#record","title":"Record","text":"<p>The product category manager returns <code>ProductCategory</code> record objects.</p> <p>To import the record class for type hinting purposes:</p> <pre><code>from openstack_odooclient import ProductCategory\n</code></pre> <p>The record class currently implements the following fields and methods.</p> <p>For more information on attributes and methods common to all record types, see Record Attributes and Methods.</p>"},{"location":"managers/product-category.html#child_id","title":"<code>child_id</code>","text":"<pre><code>child_id: list[int]\n</code></pre> <p>A list of IDs for the child categories.</p>"},{"location":"managers/product-category.html#child_ids","title":"<code>child_ids</code>","text":"<pre><code>child_ids: list[int]\n</code></pre> <p>An alias for <code>child_id</code>.</p>"},{"location":"managers/product-category.html#children","title":"<code>children</code>","text":"<pre><code>children: list[ProductCategory]\n</code></pre> <p>The list of child categories.</p> <p>This fetches the full records from Odoo once, and caches them for subsequent accesses.</p>"},{"location":"managers/product-category.html#complete_name","title":"<code>complete_name</code>","text":"<pre><code>complete_name: str\n</code></pre> <p>The complete product category tree.</p>"},{"location":"managers/product-category.html#name","title":"<code>name</code>","text":"<pre><code>name: str\n</code></pre> <p>Name of the product category.</p>"},{"location":"managers/product-category.html#parent_id","title":"<code>parent_id</code>","text":"<pre><code>parent_id: int | None\n</code></pre> <p>The ID for the parent product category, if this category is the child of another category.</p>"},{"location":"managers/product-category.html#parent_id_1","title":"<code>parent_id</code>","text":"<pre><code>parent_name: str | None\n</code></pre> <p>The name of the parent product category, if this category is the child of another category.</p>"},{"location":"managers/product-category.html#parent","title":"<code>parent</code>","text":"<pre><code>parent: ProductCategory | None\n</code></pre> <p>The parent product category, if this category is the child of another category.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/product-category.html#parent_path","title":"<code>parent_path</code>","text":"<pre><code>parent_path: str | Literal[False]\n</code></pre> <p>The path of the parent product category, if there is a parent.</p>"},{"location":"managers/product-category.html#product_count","title":"<code>product_count</code>","text":"<pre><code>product_count: int\n</code></pre> <p>The number of products under this category.</p>"},{"location":"managers/product.html","title":"Products","text":"<p>This page documents how to use the manager and record objects for products.</p>"},{"location":"managers/product.html#details","title":"Details","text":"Name Value Odoo Modules Product, Accounting, Sales Odoo Model Name <code>product.product</code> Manager <code>products</code> Record Type <code>Product</code>"},{"location":"managers/product.html#manager","title":"Manager","text":"<p>The product manager is available as the <code>products</code> attribute on the Odoo client object.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.products.get(1234)\nProduct(record={'id': 1234, ...}, fields=None)\n</code></pre> <p>For more information on how to use managers, refer to Managers.</p> <p>The following manager methods are also available, in addition to the standard methods.</p>"},{"location":"managers/product.html#get_sellable_company_products","title":"<code>get_sellable_company_products</code>","text":"<pre><code>get_sellable_company_products(\n    company: int | Company,\n    fields: Iterable[str] | None = None,\n    order: str | None = None,\n    as_id: bool = False,\n    as_dict: bool = False,\n) -&gt; list[Product]\n</code></pre> <pre><code>get_sellable_company_products(\n    company: int | Company,\n    fields: Iterable[str] | None = None,\n    order: str | None = None,\n    as_id: bool = True,\n    as_dict: bool = False,\n) -&gt; list[int]\n</code></pre> <pre><code>get_sellable_company_products(\n    company: int | Company,\n    fields: Iterable[str] | None = None,\n    order: str | None = None,\n    as_id: bool = False,\n    as_dict: bool = True,\n) -&gt; list[dict[str, Any]]\n</code></pre> <p>Fetch a list of active and saleable products for the given company.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.products.get_sellable_company_products(\n...     company=1234,  # ID or object\n... )\n[Product(record={'id': 5678, ...}, fields=None), ...]\n</code></pre>"},{"location":"managers/product.html#parameters","title":"Parameters","text":"Name Type Description Default <code>company</code> <code>int | Company</code> The company to search for products (ID or object) (required) <code>fields</code> <code>Iterable[str] | None</code> Fields to select, defaults to <code>None</code> (select all) <code>None</code> <code>order</code> <code>str | None</code> Order results by a specific field <code>None</code> <code>as_id</code> <code>bool</code> Return the record IDs only <code>False</code> <code>as_dict</code> <code>bool</code> Return records as dictionaries <code>False</code>"},{"location":"managers/product.html#returns","title":"Returns","text":"Type Description <code>list[Product]</code> List of product objects (default) <code>list[int]</code> List of product IDs (when <code>as_id</code> is <code>True</code>) <code>list[dict[str, Any]]</code> List of product dictionaries (when <code>as_dict</code> is <code>True</code>)"},{"location":"managers/product.html#get_sellable_company_product_by_name","title":"<code>get_sellable_company_product_by_name</code>","text":"<pre><code>get_sellable_company_product_by_name(\n    company: int | Company,\n    name: str,\n    fields: Iterable[str] | None = None,\n    order: str | None = None,\n    as_id: bool = False,\n    as_dict: bool = False,\n    optional: bool = False,\n) -&gt; Product\n</code></pre> <pre><code>get_sellable_company_product_by_name(\n    company: int | Company,\n    name: str,\n    fields: Iterable[str] | None = None,\n    order: str | None = None,\n    as_id: bool = False,\n    as_dict: bool = False,\n    optional: bool = True,\n) -&gt; Product | None\n</code></pre> <pre><code>get_sellable_company_product_by_name(\n    company: int | Company,\n    name: str,\n    fields: Iterable[str] | None = None,\n    order: str | None = None,\n    as_id: bool = True,\n    as_dict: bool = False,\n    optional: bool = False,\n) -&gt; int\n</code></pre> <pre><code>get_sellable_company_product_by_name(\n    company: int | Company,\n    name: str,\n    fields: Iterable[str] | None = None,\n    order: str | None = None,\n    as_id: bool = True,\n    as_dict: bool = False,\n    optional: bool = True,\n) -&gt; int | None\n</code></pre> <pre><code>get_sellable_company_product_by_name(\n    company: int | Company,\n    name: str,\n    fields: Iterable[str] | None = None,\n    order: str | None = None,\n    as_id: bool = False,\n    as_dict: bool = True,\n    optional: bool = False,\n) -&gt; dict[str, Any]\n</code></pre> <pre><code>get_sellable_company_product_by_name(\n    company: int | Company,\n    name: str,\n    fields: Iterable[str] | None = None,\n    order: str | None = None,\n    as_id: bool = False,\n    as_dict: bool = True,\n    optional: bool = True,\n) -&gt; dict[str, Any] | None\n</code></pre> <p>Query a unique product for the given company by name.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.products.get_sellable_company_product_by_name(\n...     company=1234,\n...     name=\"RegionOne.m1.small\",\n... )\nProduct(record={'id': 5678, 'name': 'RegionOne.m1.small', ...}, fields=None)\n</code></pre> <p>A number of parameters are available to configure the return type, and what happens when a result is not found.</p> <p>By default all fields available on the record model will be selected, but this can be filtered using the <code>fields</code> parameter.</p> <p>Use the <code>as_id</code> parameter to return the ID of the record, instead of the record object.</p> <p>Use the <code>as_dict</code> parameter to return the record as a <code>dict</code> object, instead of a record object.</p> <p>When <code>optional</code> is <code>True</code>, <code>None</code> is returned if a record with the given name does not exist, instead of raising an error.</p>"},{"location":"managers/product.html#parameters_1","title":"Parameters","text":"Name Type Description Default <code>company</code> <code>int | Company</code> The company to search for products (ID or object) (required) <code>name</code> <code>str</code> The product name (required) <code>fields</code> <code>Iterable[str] | None</code> Fields to select, defaults to <code>None</code> (select all) <code>None</code> <code>as_id</code> <code>bool</code> Return a record ID <code>False</code> <code>as_dict</code> <code>bool</code> Return the record as a dictionary <code>False</code> <code>optional</code> <code>bool</code> Return <code>None</code> if not found <code>False</code>"},{"location":"managers/product.html#raises","title":"Raises","text":"Type Description <code>MultipleRecordsFoundError</code> Multiple records with the same name were found <code>RecordNotFoundError</code> Record with the given name not found (when <code>optional</code> is <code>False</code>)"},{"location":"managers/product.html#returns_1","title":"Returns","text":"Type Description <code>Product</code> Product object (default) <code>int</code> Product ID (when <code>as_id</code> is <code>True</code>) <code>dict[str, Any]</code> Product dictionary (when <code>as_dict</code> is <code>True</code>) <code>None</code> If a product with the given name was not found (when <code>optional</code> is <code>True</code>)"},{"location":"managers/product.html#record","title":"Record","text":"<p>The product manager returns <code>Product</code> record objects.</p> <p>To import the record class for type hinting purposes:</p> <pre><code>from openstack_odooclient import Product\n</code></pre> <p>The record class currently implements the following fields and methods.</p> <p>For more information on attributes and methods common to all record types, see Record Attributes and Methods.</p>"},{"location":"managers/product.html#categ_id","title":"<code>categ_id</code>","text":"<pre><code>categ_id: int\n</code></pre> <p>The ID for the category this product is under.</p>"},{"location":"managers/product.html#categ_name","title":"<code>categ_name</code>","text":"<pre><code>categ_name: str\n</code></pre> <p>The name of the category this product is under.</p>"},{"location":"managers/product.html#categ","title":"<code>categ</code>","text":"<pre><code>categ: ProductCategory\n</code></pre> <p>The category this product is under.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/product.html#company_id","title":"<code>company_id</code>","text":"<pre><code>company_id: int | None\n</code></pre> <p>The ID for the company that owns this product, if set.</p>"},{"location":"managers/product.html#company_name","title":"<code>company_name</code>","text":"<pre><code>company_name: str | None\n</code></pre> <p>The name of the company that owns this product, if set.</p>"},{"location":"managers/product.html#company","title":"<code>company</code>","text":"<pre><code>company: Company | None\n</code></pre> <p>The company that owns this product, if set.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/product.html#default_code","title":"<code>default_code</code>","text":"<pre><code>default_code: str\n</code></pre> <p>The Default Code for this product.</p> <p>In the OpenStack Integration add-on, this is used to store the rated unit for the service product.</p>"},{"location":"managers/product.html#description","title":"<code>description</code>","text":"<pre><code>description: str\n</code></pre> <p>A short description of this product.</p>"},{"location":"managers/product.html#display_name","title":"<code>display_name</code>","text":"<pre><code>display_name: str\n</code></pre> <p>The name of this product in OpenStack, and on invoices.</p>"},{"location":"managers/product.html#list_price","title":"<code>list_price</code>","text":"<pre><code>list_price: float\n</code></pre> <p>The list price of the product.</p> <p>This becomes the unit price of the product on invoices.</p>"},{"location":"managers/product.html#name","title":"<code>name</code>","text":"<pre><code>name: str\n</code></pre> <p>The name of the product.</p>"},{"location":"managers/product.html#uom_id","title":"<code>uom_id</code>","text":"<pre><code>uom_id: int\n</code></pre> <p>The ID for the Unit of Measure for this product.</p>"},{"location":"managers/product.html#uom_name","title":"<code>uom_name</code>","text":"<pre><code>uom_name: str\n</code></pre> <p>The name of the Unit of Measure for this product.</p>"},{"location":"managers/product.html#uom","title":"<code>uom</code>","text":"<pre><code>uom: Uom\n</code></pre> <p>The Unit of Measure for this product.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/project-contact.html","title":"OpenStack Project Contacts","text":"<p>This page documents how to use the manager and record objects for project contacts.</p>"},{"location":"managers/project-contact.html#details","title":"Details","text":"Name Value Odoo Modules OpenStack Integration Odoo Model Name <code>openstack.project_contact</code> Manager <code>project_contacts</code> Record Type <code>ProjectContact</code>"},{"location":"managers/project-contact.html#manager","title":"Manager","text":"<p>The project contact manager is available as the <code>project_contacts</code> attribute on the Odoo client object.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.project_contacts.get(1234)\nProjectContact(record={'id': 1234, ...}, fields=None)\n</code></pre> <p>For more information on how to use managers, refer to Managers.</p>"},{"location":"managers/project-contact.html#record","title":"Record","text":"<p>The project contact manager returns <code>ProjectContact</code> record objects.</p> <p>To import the record class for type hinting purposes:</p> <pre><code>from openstack_odooclient import ProjectContact\n</code></pre> <p>The record class currently implements the following fields and methods.</p> <p>For more information on attributes and methods common to all record types, see Record Attributes and Methods.</p>"},{"location":"managers/project-contact.html#contact_type","title":"<code>contact_type</code>","text":"<pre><code>contact_type: Literal[\n    \"primary\",\n    \"billing\",\n    \"technical\",\n    \"legal\",\n    \"reseller customer\",\n]\n</code></pre> <p>The contact type to assign the partner as on the project.</p>"},{"location":"managers/project-contact.html#inherit","title":"<code>inherit</code>","text":"<pre><code>inherit: bool\n</code></pre> <p>Whether or not this contact should be inherited by child projects.</p>"},{"location":"managers/project-contact.html#partner_id","title":"<code>partner_id</code>","text":"<pre><code>partner_id: int\n</code></pre> <p>The ID for the partner linked to this project contact.</p>"},{"location":"managers/project-contact.html#partner_name","title":"<code>partner_name</code>","text":"<pre><code>partner_name: str\n</code></pre> <p>The name of the partner linked to this project contact.</p>"},{"location":"managers/project-contact.html#partner","title":"<code>partner</code>","text":"<pre><code>partner: Partner\n</code></pre> <p>The partner linked to this project contact.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/project-contact.html#project_id","title":"<code>project_id</code>","text":"<pre><code>project_id: int | None\n</code></pre> <p>The ID for the project this contact is linked to, if set.</p>"},{"location":"managers/project-contact.html#project_name","title":"<code>project_name</code>","text":"<pre><code>project_name: str | None\n</code></pre> <p>The name of the project this contact is linked to, if set.</p>"},{"location":"managers/project-contact.html#project","title":"<code>project</code>","text":"<pre><code>project: Project | None\n</code></pre> <p>The project this contact is linked to, if set.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/project.html","title":"OpenStack Projects","text":"<p>This page documents how to use the manager and record objects for projects.</p>"},{"location":"managers/project.html#details","title":"Details","text":"Name Value Odoo Modules OpenStack Integration Odoo Model Name <code>openstack.project</code> Manager <code>projects</code> Record Type <code>Project</code>"},{"location":"managers/project.html#manager","title":"Manager","text":"<p>The project manager is available as the <code>projects</code> attribute on the Odoo client object.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.projects.get(1234)\nProject(record={'id': 1234, ...}, fields=None)\n</code></pre> <p>For more information on how to use managers, refer to Managers.</p> <p>The following manager methods are also available, in addition to the standard methods.</p>"},{"location":"managers/project.html#get_by_os_id","title":"<code>get_by_os_id</code>","text":"<pre><code>get_by_os_id(\n    os_id: str,\n    fields: Iterable[str] | None = None,\n    order: str | None = None,\n    as_id: bool = False,\n    as_dict: bool = False,\n    optional: bool = False,\n) -&gt; Project\n</code></pre> <pre><code>get_by_os_id(\n    os_id: str,\n    fields: Iterable[str] | None = None,\n    order: str | None = None,\n    as_id: bool = False,\n    as_dict: bool = False,\n    optional: bool = True,\n) -&gt; Project | None\n</code></pre> <pre><code>get_by_os_id(\n    os_id: str,\n    fields: Iterable[str] | None = None,\n    order: str | None = None,\n    as_id: bool = True,\n    as_dict: bool = False,\n    optional: bool = False,\n) -&gt; int\n</code></pre> <pre><code>get_by_os_id(\n    os_id: str,\n    fields: Iterable[str] | None = None,\n    order: str | None = None,\n    as_id: bool = True,\n    as_dict: bool = False,\n    optional: bool = True,\n) -&gt; int | None\n</code></pre> <pre><code>get_by_os_id(\n    os_id: str,\n    fields: Iterable[str] | None = None,\n    order: str | None = None,\n    as_id: bool = False,\n    as_dict: bool = True,\n    optional: bool = False,\n) -&gt; dict[str, Any]\n</code></pre> <pre><code>get_by_os_id(\n    os_id: str,\n    fields: Iterable[str] | None = None,\n    order: str | None = None,\n    as_id: bool = False,\n    as_dict: bool = True,\n    optional: bool = True,\n) -&gt; dict[str, Any] | None\n</code></pre> <p>Query a unique record by OpenStack project ID.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.projects.get_by_os_id(\"1a2b3c4d5e1a2b3c4d5e1a2b3c4d5e1a\")\nProject(record={'id': 1234, 'name': 'test-project', 'os_id': '1a2b3c4d5e1a2b3c4d5e1a2b3c4d5e1a', ...}, fields=None)\n</code></pre> <p>A number of parameters are available to configure the return type, and what happens when a result is not found.</p> <p>By default all fields available on the record model will be selected, but this can be filtered using the <code>fields</code> parameter.</p> <p>Use the <code>as_id</code> parameter to return the ID of the record, instead of the record object.</p> <p>Use the <code>as_dict</code> parameter to return the record as a <code>dict</code> object, instead of a record object.</p> <p>When <code>optional</code> is <code>True</code>, <code>None</code> is returned if a record with the given name does not exist, instead of raising an error.</p>"},{"location":"managers/project.html#parameters","title":"Parameters","text":"Name Type Description Default <code>os_id</code> <code>str</code> The OpenStack project ID to search for (required) <code>fields</code> <code>Iterable[str] | None</code> Fields to select, defaults to <code>None</code> (select all) <code>None</code> <code>as_id</code> <code>bool</code> Return a record ID <code>False</code> <code>as_dict</code> <code>bool</code> Return the record as a dictionary <code>False</code> <code>optional</code> <code>bool</code> Return <code>None</code> if not found <code>False</code>"},{"location":"managers/project.html#raises","title":"Raises","text":"Type Description <code>MultipleRecordsFoundError</code> Multiple records with the same name were found <code>RecordNotFoundError</code> Record with the given name not found (when <code>optional</code> is <code>False</code>)"},{"location":"managers/project.html#returns","title":"Returns","text":"Type Description <code>Project</code> Project object (default) <code>int</code> Project ID (when <code>as_id</code> is <code>True</code>) <code>dict[str, Any]</code> Project dictionary (when <code>as_dict</code> is <code>True</code>) <code>None</code> If a project with the given name was not found (when <code>optional</code> is <code>True</code>)"},{"location":"managers/project.html#record","title":"Record","text":"<p>The project manager returns <code>Project</code> record objects.</p> <p>To import the record class for type hinting purposes:</p> <pre><code>from openstack_odooclient import Project\n</code></pre> <p>The record class currently implements the following fields and methods.</p> <p>For more information on attributes and methods common to all record types, see Record Attributes and Methods.</p>"},{"location":"managers/project.html#display_name","title":"<code>display_name</code>","text":"<pre><code>display_name: str\n</code></pre> <p>The automatically generated display name for the project.</p>"},{"location":"managers/project.html#enabled","title":"<code>enabled</code>","text":"<pre><code>enabled: bool\n</code></pre> <p>Whether or not the project is enabled in Odoo.</p>"},{"location":"managers/project.html#group_invoices","title":"<code>group_invoices</code>","text":"<pre><code>group_invoices: bool\n</code></pre> <p>Whether or not to group invoices together for this project.</p>"},{"location":"managers/project.html#name","title":"<code>name</code>","text":"<pre><code>name: str\n</code></pre> <p>OpenStack project name.</p>"},{"location":"managers/project.html#os_id","title":"<code>os_id</code>","text":"<pre><code>os_id: str\n</code></pre> <p>OpenStack project ID.</p>"},{"location":"managers/project.html#override_po_number","title":"<code>override_po_number</code>","text":"<pre><code>override_po_number: bool\n</code></pre> <p>Whether or not to override the PO number with the value set on this Project.</p>"},{"location":"managers/project.html#owner_id","title":"<code>owner_id</code>","text":"<pre><code>owner_id: int\n</code></pre> <p>The ID for the partner that owns this project.</p>"},{"location":"managers/project.html#owner_name","title":"<code>owner_name</code>","text":"<pre><code>owner_name: str\n</code></pre> <p>The name of the partner that owns this project.</p>"},{"location":"managers/project.html#owner","title":"<code>owner</code>","text":"<pre><code>owner: Partner\n</code></pre> <p>The partner that owns this project.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/project.html#parent_id","title":"<code>parent_id</code>","text":"<pre><code>parent_id: int | None\n</code></pre> <p>The ID for the parent project, if this project is the child of another project.</p>"},{"location":"managers/project.html#parent_name","title":"<code>parent_name</code>","text":"<pre><code>parent_name: str | None\n</code></pre> <p>The name of the parent project, if this project is the child of another project.</p>"},{"location":"managers/project.html#parent","title":"<code>parent</code>","text":"<pre><code>parent: Project | None\n</code></pre> <p>The parent project, if this project is the child of another project.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/project.html#payment_method","title":"<code>payment_method</code>","text":"<pre><code>payment_method: Literal[\"invoice\", \"credit_card\"]\n</code></pre> <p>Payment method configured on the project.</p> <p>Values:</p> <ul> <li><code>invoice</code> - Project is paid by invoice</li> <li><code>credit_card</code> - Project is paid by credit card</li> </ul>"},{"location":"managers/project.html#po_number","title":"<code>po_number</code>","text":"<pre><code>po_number: str | Literal[False]\n</code></pre> <p>The PO number set for this specific Project (if set).</p>"},{"location":"managers/project.html#project_contact_ids","title":"<code>project_contact_ids</code>","text":"<pre><code>project_contact_ids: list[int]\n</code></pre> <p>A list of IDs for the contacts for this project.</p>"},{"location":"managers/project.html#project_contacts","title":"<code>project_contacts</code>","text":"<pre><code>project_contacts: list[ProjectContact]\n</code></pre> <p>The contacts for this project.</p> <p>This fetches the full records from Odoo once, and caches them for subsequent accesses.</p>"},{"location":"managers/project.html#project_credit_ids","title":"<code>project_credit_ids</code>","text":"<pre><code>project_credit_ids: list[int]\n</code></pre> <p>A list of IDs for the credits that apply to this project.</p>"},{"location":"managers/project.html#project_credits","title":"<code>project_credits</code>","text":"<pre><code>project_credits: list[Credit]\n</code></pre> <p>The credits that apply to this project.</p> <p>This fetches the full records from Odoo once, and caches them for subsequent accesses.</p>"},{"location":"managers/project.html#project_grant_ids","title":"<code>project_grant_ids</code>","text":"<pre><code>project_grant_ids: list[int]\n</code></pre> <p>A list of IDs for the grants that apply to this project.</p>"},{"location":"managers/project.html#project_grants","title":"<code>project_grants</code>","text":"<pre><code>project_grants: list[Grant]\n</code></pre> <p>The grants that apply to this project.</p> <p>This fetches the full records from Odoo once, and caches them for subsequent accesses.</p>"},{"location":"managers/project.html#stripe_card_id","title":"<code>stripe_card_id</code>","text":"<pre><code>stripe_card_id: str | Literal[False]\n</code></pre> <p>The card ID used for credit card payments on this project using Stripe, if the payment method is set to <code>credit_card</code>.</p> <p>If a credit card has not been assigned to this project, this field will be set to <code>False</code>.</p>"},{"location":"managers/project.html#support_subscription_id","title":"<code>support_subscription_id</code>","text":"<pre><code>support_subscription_id: int | None\n</code></pre> <p>The ID for the support subscription for this project, if the project has one.</p>"},{"location":"managers/project.html#support_subscription_name","title":"<code>support_subscription_name</code>","text":"<pre><code>support_subscription_name: str | None\n</code></pre> <p>The name of the support subscription for this project, if the project has one.</p>"},{"location":"managers/project.html#support_subscription","title":"<code>support_subscription</code>","text":"<pre><code>support_subscription: SupportSubscription | None\n</code></pre> <p>The support subscription for this project, if the project has one.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/project.html#term_discount_ids","title":"<code>term_discount_ids</code>","text":"<pre><code>term_discount_ids: list[int]\n</code></pre> <p>A list of IDs for the term discounts that apply to this project.</p>"},{"location":"managers/project.html#term_discounts","title":"<code>term_discounts</code>","text":"<pre><code>term_discounts: list[TermDiscount]\n</code></pre> <p>The term discounts that apply to this project.</p> <p>This fetches the full records from Odoo once, and caches them for subsequent accesses.</p>"},{"location":"managers/referral-code.html","title":"OpenStack Referral Codes","text":"<p>This page documents how to use the manager and record objects for referral codes.</p>"},{"location":"managers/referral-code.html#details","title":"Details","text":"Name Value Odoo Modules OpenStack Integration Odoo Model Name <code>openstack.referral_code</code> Manager <code>referral_codes</code> Record Type <code>ReferralCode</code>"},{"location":"managers/referral-code.html#manager","title":"Manager","text":"<p>The project manager is available as the <code>referral_codes</code> attribute on the Odoo client object.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.referral_codes.get(1234)\nReferralCode(record={'id': 1234, ...}, fields=None)\n</code></pre> <p>For more information on how to use managers, refer to Managers.</p>"},{"location":"managers/referral-code.html#record","title":"Record","text":"<p>The referral code manager returns <code>ReferralCode</code> record objects.</p> <p>To import the record class for type hinting purposes:</p> <pre><code>from openstack_odooclient import ReferralCode\n</code></pre> <p>The record class currently implements the following fields and methods.</p> <p>For more information on attributes and methods common to all record types, see Record Attributes and Methods.</p>"},{"location":"managers/referral-code.html#allowed_uses","title":"<code>allowed_uses</code>","text":"<pre><code>allowed_uses: int\n</code></pre> <p>The number of allowed uses of this referral code.</p> <p>Set to <code>-1</code> for unlimited uses.</p>"},{"location":"managers/referral-code.html#before_reward_usage_threshold","title":"<code>before_reward_usage_threshold</code>","text":"<pre><code>before_reward_usage_threshold: float\n</code></pre> <p>The amount of usage that must be recorded by the new sign-up before the reward credit is awarded to the referrer.</p>"},{"location":"managers/referral-code.html#code","title":"<code>code</code>","text":"<pre><code>code: str\n</code></pre> <p>The unique referral code.</p>"},{"location":"managers/referral-code.html#name","title":"<code>name</code>","text":"<pre><code>name: str\n</code></pre> <p>Automatically generated name for the referral code.</p>"},{"location":"managers/referral-code.html#referral_ids","title":"<code>referral_ids</code>","text":"<pre><code>referral_ids: list[int]\n</code></pre> <p>A list of IDs for the partners that signed up using this referral code.</p>"},{"location":"managers/referral-code.html#referrals","title":"<code>referrals</code>","text":"<pre><code>referrals: list[Partner]\n</code></pre> <p>The partners that signed up using this referral code.</p> <p>This fetches the full records from Odoo once, and caches them for subsequent accesses.</p>"},{"location":"managers/referral-code.html#referral_credit_amount","title":"<code>referral_credit_amount</code>","text":"<pre><code>referral_credit_amount: float\n</code></pre> <p>Initial balance for the referral credit.</p>"},{"location":"managers/referral-code.html#referral_credit_duration","title":"<code>referral_credit_duration</code>","text":"<pre><code>referral_credit_duration: int\n</code></pre> <p>Duration of the referral credit, in days.</p>"},{"location":"managers/referral-code.html#referral_credit_type_id","title":"<code>referral_credit_type_id</code>","text":"<pre><code>referral_credit_type_id: int\n</code></pre> <p>The ID of the credit type to use for the referral credit.</p>"},{"location":"managers/referral-code.html#referral_credit_type_name","title":"<code>referral_credit_type_name</code>","text":"<pre><code>referral_credit_type_name: str\n</code></pre> <p>The name of the credit type to use for the referral credit.</p>"},{"location":"managers/referral-code.html#referral_credit_type","title":"<code>referral_credit_type</code>","text":"<pre><code>referral_credit_type: CreditType\n</code></pre> <p>The credit type to use for the referral credit.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/referral-code.html#reward_credit_amount","title":"<code>reward_credit_amount</code>","text":"<pre><code>reward_credit_amount: float\n</code></pre> <p>Initial balance for the reward credit.</p>"},{"location":"managers/referral-code.html#reward_credit_duration","title":"<code>reward_credit_duration</code>","text":"<pre><code>reward_credit_duration: int\n</code></pre> <p>Duration of the reward credit, in days.</p>"},{"location":"managers/referral-code.html#reward_credit_type_id","title":"<code>reward_credit_type_id</code>","text":"<pre><code>reward_credit_type_id: int\n</code></pre> <p>The ID of the credit type to use for the reward credit.</p>"},{"location":"managers/referral-code.html#reward_credit_type_name","title":"<code>reward_credit_type_name</code>","text":"<pre><code>reward_credit_type_name: str\n</code></pre> <p>The name of the credit type to use for the reward credit.</p>"},{"location":"managers/referral-code.html#reward_credit_type","title":"<code>reward_credit_type</code>","text":"<pre><code>reward_credit_type: CreditType\n</code></pre> <p>The credit type to use for the reward credit.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/reseller-tier.html","title":"OpenStack Reseller Tiers","text":"<p>This page documents how to use the manager and record objects for reseller tiers.</p>"},{"location":"managers/reseller-tier.html#details","title":"Details","text":"Name Value Odoo Modules OpenStack Integration Odoo Model Name <code>openstack.reseller.tier</code> Manager <code>reseller_tiers</code> Record Type <code>ResellerTier</code>"},{"location":"managers/reseller-tier.html#manager","title":"Manager","text":"<p>The reseller tier manager is available as the <code>reseller_tiers</code> attribute on the Odoo client object.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.reseller_tiers.get(1234)\nResellerTier(record={'id': 1234, ...}, fields=None)\n</code></pre> <p>For more information on how to use managers, refer to Managers.</p>"},{"location":"managers/reseller-tier.html#record","title":"Record","text":"<p>The reseller tier manager returns <code>ResellerTier</code> record objects.</p> <p>To import the record class for type hinting purposes:</p> <pre><code>from openstack_odooclient import ResellerTier\n</code></pre> <p>The record class currently implements the following fields and methods.</p> <p>For more information on attributes and methods common to all record types, see Record Attributes and Methods.</p>"},{"location":"managers/reseller-tier.html#discount_percent","title":"<code>discount_percent</code>","text":"<pre><code>discount_percent: float\n</code></pre> <p>The maximum discount percentage for this reseller tier (0-100).</p>"},{"location":"managers/reseller-tier.html#discount_product_id","title":"<code>discount_product_id</code>","text":"<pre><code>discount_product_id: int\n</code></pre> <p>The ID of the discount product for the reseller tier.</p>"},{"location":"managers/reseller-tier.html#discount_product_name","title":"<code>discount_product_name</code>","text":"<pre><code>discount_product_name: str\n</code></pre> <p>The name of the discount product for the reseller tier.</p>"},{"location":"managers/reseller-tier.html#discount_product","title":"<code>discount_product</code>","text":"<pre><code>discount_product: Product\n</code></pre> <p>The discount product for the reseller tier.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/reseller-tier.html#free_monthly_credit","title":"<code>free_monthly_credit</code>","text":"<pre><code>free_monthly_credit: float\n</code></pre> <p>The amount the reseller gets monthly in credit for demo projects.</p>"},{"location":"managers/reseller-tier.html#free_monthly_credit_product_id","title":"<code>free_monthly_credit_product_id</code>","text":"<pre><code>free_monthly_credit_product_id: int\n</code></pre> <p>The ID of the product to use when adding the free monthly credit to demo project invoices.</p>"},{"location":"managers/reseller-tier.html#free_monthly_credit_product_name","title":"<code>free_monthly_credit_product_name</code>","text":"<pre><code>free_monthly_credit_product_name: str\n</code></pre> <p>The name of the product to use when adding the free monthly credit to demo project invoices.</p>"},{"location":"managers/reseller-tier.html#free_monthly_credit_product","title":"<code>free_monthly_credit_product</code>","text":"<pre><code>free_monthly_credit_product: Product\n</code></pre> <p>The product to use when adding the free monthly credit to demo project invoices.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/reseller-tier.html#free_support_hours","title":"<code>free_support_hours</code>","text":"<pre><code>free_support_hours: int\n</code></pre> <p>The amount of free support hours the reseller is entitled to under this tier.</p>"},{"location":"managers/reseller-tier.html#name","title":"<code>name</code>","text":"<pre><code>name: str\n</code></pre> <p>Reseller tier name.</p>"},{"location":"managers/reseller-tier.html#name_1","title":"<code>name</code>","text":"<pre><code>min_usage_threshold: float\n</code></pre> <p>The minimum required usage amount for the reseller tier.</p>"},{"location":"managers/reseller.html","title":"OpenStack Resellers","text":"<p>This page documents how to use the manager and record objects for resellers.</p>"},{"location":"managers/reseller.html#details","title":"Details","text":"Name Value Odoo Modules OpenStack Integration Odoo Model Name <code>openstack.reseller</code> Manager <code>resellers</code> Record Type <code>Reseller</code>"},{"location":"managers/reseller.html#manager","title":"Manager","text":"<p>The reseller manager is available as the <code>resellers</code> attribute on the Odoo client object.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.resellers.get(1234)\nReseller(record={'id': 1234, ...}, fields=None)\n</code></pre> <p>For more information on how to use managers, refer to Managers.</p>"},{"location":"managers/reseller.html#record","title":"Record","text":"<p>The reseller manager returns <code>Reseller</code> record objects.</p> <p>To import the record class for type hinting purposes:</p> <pre><code>from openstack_odooclient import Reseller\n</code></pre> <p>The record class currently implements the following fields and methods.</p> <p>For more information on attributes and methods common to all record types, see Record Attributes and Methods.</p>"},{"location":"managers/reseller.html#alternative_billing_url","title":"<code>alternative_billing_url</code>","text":"<pre><code>alternative_billing_url: str | None\n</code></pre> <p>The URL to the cloud billing page for the reseller, if available.</p>"},{"location":"managers/reseller.html#alternative_support_url","title":"<code>alternative_support_url</code>","text":"<pre><code>alternative_support_url: str | None\n</code></pre> <p>The URL to the cloud support centre for the reseller, if available.</p>"},{"location":"managers/reseller.html#demo_project_id","title":"<code>demo_project_id</code>","text":"<pre><code>demo_project_id: int | None\n</code></pre> <p>The ID for the optional demo project belonging to the reseller.</p>"},{"location":"managers/reseller.html#demo_project_name","title":"<code>demo_project_name</code>","text":"<pre><code>demo_project_name: str | None\n</code></pre> <p>The name of the optional demo project belonging to the reseller.</p>"},{"location":"managers/reseller.html#demo_project","title":"<code>demo_project</code>","text":"<pre><code>demo_project: Project | None\n</code></pre> <p>An optional demo project belonging to the reseller.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/reseller.html#hide_billing","title":"<code>hide_billing</code>","text":"<pre><code>hide_billing: bool\n</code></pre> <p>Whether or not the billing URL should be hidden.</p>"},{"location":"managers/reseller.html#hide_support","title":"<code>hide_support</code>","text":"<pre><code>hide_support: bool\n</code></pre> <p>Whether or not the support URL should be hidden.</p>"},{"location":"managers/reseller.html#name","title":"<code>name</code>","text":"<pre><code>name: str\n</code></pre> <p>The automatically generated reseller name.</p> <p>This is set to the reseller partner's name.</p>"},{"location":"managers/reseller.html#partner_id","title":"<code>partner_id</code>","text":"<pre><code>partner_id: int\n</code></pre> <p>The ID for the reseller partner.</p>"},{"location":"managers/reseller.html#partner_name","title":"<code>partner_name</code>","text":"<pre><code>partner_name: str\n</code></pre> <p>The name of the reseller partner.</p>"},{"location":"managers/reseller.html#partner","title":"<code>partner</code>","text":"<pre><code>partner: Partner\n</code></pre> <p>The reseller partner.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/reseller.html#tier_id","title":"<code>tier_id</code>","text":"<pre><code>tier_id: int\n</code></pre> <p>The ID for the tier this reseller is under.</p>"},{"location":"managers/reseller.html#tier_name","title":"<code>tier_name</code>","text":"<pre><code>tier_name: str\n</code></pre> <p>The name of the tier this reseller is under.</p>"},{"location":"managers/reseller.html#tier","title":"<code>tier</code>","text":"<pre><code>tier: ResellerTier\n</code></pre> <p>The tier this reseller is under.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/sale-order-line.html","title":"Sale Order Lines","text":"<p>This page documents how to use the manager and record objects for sale order lines.</p>"},{"location":"managers/sale-order-line.html#details","title":"Details","text":"Name Value Odoo Modules Sales, OpenStack Integration Odoo Model Name <code>sale.order.line</code> Manager <code>sale_order_lines</code> Record Type <code>SaleOrderLine</code>"},{"location":"managers/sale-order-line.html#manager","title":"Manager","text":"<p>The sale order line manager is available as the <code>sale_order_lines</code> attribute on the Odoo client object.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.sale_order_lines.get(1234)\nSaleOrderLine(record={'id': 1234, ...}, fields=None)\n</code></pre> <p>For more information on how to use managers, refer to Managers.</p>"},{"location":"managers/sale-order-line.html#record","title":"Record","text":"<p>The sale order line manager returns <code>SaleOrderLine</code> record objects.</p> <p>To import the record class for type hinting purposes:</p> <pre><code>from openstack_odooclient import SaleOrderLine\n</code></pre> <p>The record class currently implements the following fields and methods.</p> <p>For more information on attributes and methods common to all record types, see Record Attributes and Methods.</p>"},{"location":"managers/sale-order-line.html#company_id","title":"<code>company_id</code>","text":"<pre><code>company_id: int\n</code></pre> <p>The ID for the company this sale order line was generated for.</p>"},{"location":"managers/sale-order-line.html#company_name","title":"<code>company_name</code>","text":"<pre><code>company_name: str\n</code></pre> <p>The name of the company this sale order line was generated for.</p>"},{"location":"managers/sale-order-line.html#company","title":"<code>company</code>","text":"<pre><code>company: Company\n</code></pre> <p>The company this sale order line was generated for.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/sale-order-line.html#currency_id","title":"<code>currency_id</code>","text":"<pre><code>currency_id: int\n</code></pre> <p>The ID for the currency used in this sale order line.</p>"},{"location":"managers/sale-order-line.html#currency_name","title":"<code>currency_name</code>","text":"<pre><code>currency_name: str\n</code></pre> <p>The name of the currency used in this sale order line.</p>"},{"location":"managers/sale-order-line.html#currency","title":"<code>currency</code>","text":"<pre><code>currency: Currency\n</code></pre> <p>The currency used in this sale order line.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/sale-order-line.html#discount","title":"<code>discount</code>","text":"<pre><code>discount: float\n</code></pre> <p>Discount percentage on the sale order line (0-100).</p>"},{"location":"managers/sale-order-line.html#display_name","title":"<code>display_name</code>","text":"<pre><code>display_name: str\n</code></pre> <p>Display name for the sale order line in the sale order.</p>"},{"location":"managers/sale-order-line.html#invoice_line_ids","title":"<code>invoice_line_ids</code>","text":"<pre><code>invoice_line_ids: list[int]\n</code></pre> <p>A list of IDs for the account move (invoice) lines created from this sale order line.</p>"},{"location":"managers/sale-order-line.html#invoice_lines","title":"<code>invoice_lines</code>","text":"<pre><code>invoice_lines: list[AccountMoveLine]\n</code></pre> <p>The account move (invoice) lines created from this sale order line.</p> <p>This fetches the full records from Odoo once, and caches them for subsequent accesses.</p>"},{"location":"managers/sale-order-line.html#invoice_status","title":"<code>invoice_status</code>","text":"<pre><code>invoice_status: Literal[\"no\", \"to invoice\", \"invoiced\", \"upselling\"]\n</code></pre> <p>The current invoicing status of this sale order line.</p> <p>Values:</p> <ul> <li><code>no</code> - Nothing to invoice</li> <li><code>to invoice</code> - Has quantity that needs to be invoiced</li> <li><code>invoiced</code> - Fully invoiced</li> <li><code>upselling</code> - Upselling opportunity</li> </ul>"},{"location":"managers/sale-order-line.html#is_downpayment","title":"<code>is_downpayment</code>","text":"<pre><code>is_downpayment: bool\n</code></pre> <p>Whether or not this sale order line is a downpayment.</p>"},{"location":"managers/sale-order-line.html#is_expense","title":"<code>is_expense</code>","text":"<pre><code>is_expense: bool\n</code></pre> <p>Whether or not this sale order line is an expense.</p>"},{"location":"managers/sale-order-line.html#name","title":"<code>name</code>","text":"<pre><code>name: str\n</code></pre> <p>Name assigned to the the sale order line.</p> <p>This is not the same as the product name. In the OpenStack Integration add-on, this is normally used to store the resource's name.</p>"},{"location":"managers/sale-order-line.html#order_id","title":"<code>order_id</code>","text":"<pre><code>order_id: int\n</code></pre> <p>The ID for the sale order this line is linked to.</p>"},{"location":"managers/sale-order-line.html#order_name","title":"<code>order_name</code>","text":"<pre><code>order_name: str\n</code></pre> <p>The name of the sale order this line is linked to.</p>"},{"location":"managers/sale-order-line.html#order","title":"<code>order</code>","text":"<pre><code>order: SaleOrder\n</code></pre> <p>The sale order this line is linked to.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/sale-order-line.html#order_partner_id","title":"<code>order_partner_id</code>","text":"<pre><code>order_partner_id: int\n</code></pre> <p>The ID for the recipient partner for the sale order.</p>"},{"location":"managers/sale-order-line.html#order_partner_name","title":"<code>order_partner_name</code>","text":"<pre><code>order_partner_name: str\n</code></pre> <p>The name of the recipient partner for the sale order.</p>"},{"location":"managers/sale-order-line.html#order_partner","title":"<code>order_partner</code>","text":"<pre><code>order_partner: Partner\n</code></pre> <p>The recipient partner for the sale order.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/sale-order-line.html#os_project_id","title":"<code>os_project_id</code>","text":"<pre><code>os_project_id: int | None\n</code></pre> <p>The ID for the the OpenStack project this sale order line was was generated for.</p>"},{"location":"managers/sale-order-line.html#os_project_name","title":"<code>os_project_name</code>","text":"<pre><code>os_project_name: str | None\n</code></pre> <p>The name of the the OpenStack project this sale order line was was generated for.</p>"},{"location":"managers/sale-order-line.html#os_project","title":"<code>os_project</code>","text":"<pre><code>os_project: Project | None\n</code></pre> <p>The OpenStack project this sale order line was was generated for.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/sale-order-line.html#os_region","title":"<code>os_region</code>","text":"<pre><code>os_region: str | Literal[False]\n</code></pre> <p>The OpenStack region the sale order line was created from.</p>"},{"location":"managers/sale-order-line.html#os_resource_id","title":"<code>os_resource_id</code>","text":"<pre><code>os_resource_id: str | Literal[False]\n</code></pre> <p>The OpenStack resource ID for the resource that generated this sale order line.</p>"},{"location":"managers/sale-order-line.html#os_resource_name","title":"<code>os_resource_name</code>","text":"<pre><code>os_resource_name: str | Literal[False]\n</code></pre> <p>The name of the OpenStack resource tier or flavour, as used by services such as Distil for rating purposes.</p> <p>For example, if this is the sale order line for a compute instance, this would be set to the instance's flavour name.</p>"},{"location":"managers/sale-order-line.html#os_resource_type","title":"<code>os_resource_type</code>","text":"<pre><code>os_resource_type: str | Literal[False]\n</code></pre> <p>A human-readable description of the type of resource captured by this sale order line.</p>"},{"location":"managers/sale-order-line.html#price_reduce","title":"<code>price_reduce</code>","text":"<pre><code>price_reduce: float\n</code></pre> <p>Base unit price, less discount (see the <code>discount</code> field).</p>"},{"location":"managers/sale-order-line.html#price_reduce_taxexcl","title":"<code>price_reduce_taxexcl</code>","text":"<pre><code>price_reduce_taxexcl: float\n</code></pre> <p>Actual unit price, excluding tax.</p>"},{"location":"managers/sale-order-line.html#price_reduce_taxinc","title":"<code>price_reduce_taxinc</code>","text":"<pre><code>price_reduce_taxinc: float\n</code></pre> <p>Actual unit price, including tax.</p>"},{"location":"managers/sale-order-line.html#price_subtotal","title":"<code>price_subtotal</code>","text":"<pre><code>price_subtotal: float\n</code></pre> <p>Subtotal price for the sale order line, excluding tax.</p>"},{"location":"managers/sale-order-line.html#price_tax","title":"<code>price_tax</code>","text":"<pre><code>price_tax: float\n</code></pre> <p>Tax charged on the sale order line.</p>"},{"location":"managers/sale-order-line.html#price_total","title":"<code>price_total</code>","text":"<pre><code>price_total: float\n</code></pre> <p>Total price for the sale order line, including tax.</p>"},{"location":"managers/sale-order-line.html#price_unit","title":"<code>price_unit</code>","text":"<pre><code>price_unit: float\n</code></pre> <p>Base unit price, excluding tax, before any discounts.</p>"},{"location":"managers/sale-order-line.html#product_id","title":"<code>product_id</code>","text":"<pre><code>product_id: int\n</code></pre> <p>The ID of the product charged on this sale order line.</p>"},{"location":"managers/sale-order-line.html#product_name","title":"<code>product_name</code>","text":"<pre><code>product_name: str\n</code></pre> <p>The name of the product charged on this sale order line.</p>"},{"location":"managers/sale-order-line.html#product","title":"<code>product</code>","text":"<pre><code>product: Product\n</code></pre> <p>The product charged on this sale order line.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/sale-order-line.html#product_1","title":"<code>product</code>","text":"<pre><code>product_uom_id: int\n</code></pre> <p>The ID for the Unit of Measure for the product being charged in this sale order line.</p>"},{"location":"managers/sale-order-line.html#product_uom_name","title":"<code>product_uom_name</code>","text":"<pre><code>product_uom_name: str\n</code></pre> <p>The name of the Unit of Measure for the product being charged in this sale order line.</p>"},{"location":"managers/sale-order-line.html#product_uom","title":"<code>product_uom</code>","text":"<pre><code>product_uom: Uom\n</code></pre> <p>The Unit of Measure for the product being charged in this sale order line.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/sale-order-line.html#product_uom_qty","title":"<code>product_uom_qty</code>","text":"<pre><code>product_uom_qty: float\n</code></pre> <p>The product quantity on the sale order line.</p>"},{"location":"managers/sale-order-line.html#product_uom_readonly","title":"<code>product_uom_readonly</code>","text":"<pre><code>product_uom_readonly: bool\n</code></pre> <p>Whether or not the product quantity can still be updated on this sale order line.</p>"},{"location":"managers/sale-order-line.html#product_updatable","title":"<code>product_updatable</code>","text":"<pre><code>product_updatable: bool\n</code></pre> <p>Whether or not the product can be edited on this sale order line.</p>"},{"location":"managers/sale-order-line.html#qty_invoiced","title":"<code>qty_invoiced</code>","text":"<pre><code>qty_invoiced: float\n</code></pre> <p>The product quantity that has already been invoiced.</p>"},{"location":"managers/sale-order-line.html#qty_to_invoice","title":"<code>qty_to_invoice</code>","text":"<pre><code>qty_to_invoice: float\n</code></pre> <p>The product quantity that still needs to be invoiced.</p>"},{"location":"managers/sale-order-line.html#salesman_id","title":"<code>salesman_id</code>","text":"<pre><code>salesman_id: int\n</code></pre> <p>The ID for the salesperson partner assigned to this sale order line.</p>"},{"location":"managers/sale-order-line.html#salesman_name","title":"<code>salesman_name</code>","text":"<pre><code>salesman_name: str\n</code></pre> <p>The name of the salesperson partner assigned to this sale order line.</p>"},{"location":"managers/sale-order-line.html#salesman","title":"<code>salesman</code>","text":"<pre><code>salesman: Partner\n</code></pre> <p>The salesperson partner assigned to this sale order line.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/sale-order-line.html#state","title":"<code>state</code>","text":"<pre><code>state: Literal[\"draft\", \"sale\", \"done\", \"cancel\"]\n</code></pre> <p>State of the sale order.</p> <p>Values:</p> <ul> <li><code>draft</code> - Draft sale order (quotation), can still be modified</li> <li><code>sale</code> - Finalised sale order, cannot be modified</li> <li><code>done</code> - Finalised and settled sale order, cannot be modified</li> <li><code>cancel</code> - Cancelled sale order, can be deleted</li> </ul>"},{"location":"managers/sale-order-line.html#tax_id","title":"<code>tax_id</code>","text":"<pre><code>tax_id: int\n</code></pre> <p>The ID for the tax used on this sale order line.</p>"},{"location":"managers/sale-order-line.html#tax_name","title":"<code>tax_name</code>","text":"<pre><code>tax_name: str\n</code></pre> <p>The name of the tax used on this sale order line.</p>"},{"location":"managers/sale-order-line.html#tax","title":"<code>tax</code>","text":"<pre><code>tax: Tax\n</code></pre> <p>The tax used on this sale order line.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/sale-order-line.html#untaxed_amount_invoiced","title":"<code>untaxed_amount_invoiced</code>","text":"<pre><code>untaxed_amount_invoiced: float\n</code></pre> <p>The balance, excluding tax, on the sale order line that has already been invoiced.</p>"},{"location":"managers/sale-order-line.html#untaxed_amount_to_invoice","title":"<code>untaxed_amount_to_invoice</code>","text":"<pre><code>untaxed_amount_to_invoice: float\n</code></pre> <p>The balance, excluding tax, on the sale order line that still needs to be invoiced.</p>"},{"location":"managers/sale-order.html","title":"Sale Orders","text":"<p>This page documents how to use the manager and record objects for sale orders.</p>"},{"location":"managers/sale-order.html#details","title":"Details","text":"Name Value Odoo Modules Sales, OpenStack Integration Odoo Model Name <code>sale.order</code> Manager <code>sale_orders</code> Record Type <code>SaleOrder</code>"},{"location":"managers/sale-order.html#manager","title":"Manager","text":"<p>The sale order manager is available as the <code>sale_orders</code> attribute on the Odoo client object.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.sale_orders.get(1234)\nSaleOrder(record={'id': 1234, ...}, fields=None)\n</code></pre> <p>For more information on how to use managers, refer to Managers.</p> <p>The following manager methods are also available, in addition to the standard methods.</p>"},{"location":"managers/sale-order.html#action_confirm","title":"<code>action_confirm</code>","text":"<pre><code>action_confirm(\n    sale_order: int | SaleOrder,\n) -&gt; None\n</code></pre> <p>Confirm the given sale order.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.sale_orders.action_confirm(\n...     sale_order=1234,  # ID or object\n... )\n</code></pre>"},{"location":"managers/sale-order.html#parameters","title":"Parameters","text":"Name Type Description Default <code>sale_order</code> <code>int | SaleOrder</code> The sale order to confirm (required)"},{"location":"managers/sale-order.html#create_invoices","title":"<code>create_invoices</code>","text":"<pre><code>create_invoices(\n    sale_order: int | SaleOrder,\n) -&gt; None\n</code></pre> <p>Create invoices from the given sale order.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.sale_orders.create_invoices(\n...     sale_order=1234,  # ID or object\n... )\n</code></pre>"},{"location":"managers/sale-order.html#parameters_1","title":"Parameters","text":"Name Type Description Default <code>sale_order</code> <code>int | SaleOrder</code> The sale order to create invoices from (required)"},{"location":"managers/sale-order.html#record","title":"Record","text":"<p>The sale order manager returns <code>SaleOrder</code> record objects.</p> <p>To import the record class for type hinting purposes:</p> <pre><code>from openstack_odooclient import SaleOrder\n</code></pre> <p>The record class currently implements the following fields and methods.</p> <p>For more information on attributes and methods common to all record types, see Record Attributes and Methods.</p>"},{"location":"managers/sale-order.html#amount_untaxed","title":"<code>amount_untaxed</code>","text":"<pre><code>amount_untaxed: float\n</code></pre> <p>The untaxed total cost of the sale order.</p>"},{"location":"managers/sale-order.html#amount_tax","title":"<code>amount_tax</code>","text":"<pre><code>amount_tax: float\n</code></pre> <p>The amount in taxes on this sale order.</p>"},{"location":"managers/sale-order.html#amount_total","title":"<code>amount_total</code>","text":"<pre><code>amount_total: float\n</code></pre> <p>The taxed total cost of the sale order.</p>"},{"location":"managers/sale-order.html#client_order_ref","title":"<code>client_order_ref</code>","text":"<pre><code>client_order_ref: str | Literal[False]\n</code></pre> <p>The customer reference for this sale order, if defined.</p>"},{"location":"managers/sale-order.html#currency_id","title":"<code>currency_id</code>","text":"<pre><code>currency_id: int\n</code></pre> <p>The ID for the currency used in this sale order.</p>"},{"location":"managers/sale-order.html#currency_name","title":"<code>currency_name</code>","text":"<pre><code>currency_name: str\n</code></pre> <p>The name of the currency used in this sale order.</p>"},{"location":"managers/sale-order.html#currency","title":"<code>currency</code>","text":"<pre><code>currency: Currency\n</code></pre> <p>The currency used in this sale order.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/sale-order.html#date_order","title":"<code>date_order</code>","text":"<pre><code>date_order: datetime\n</code></pre> <p>The time the sale order was created.</p>"},{"location":"managers/sale-order.html#display_name","title":"<code>display_name</code>","text":"<pre><code>display_name: str\n</code></pre> <p>The display name of the sale order.</p>"},{"location":"managers/sale-order.html#invoice_status","title":"<code>invoice_status</code>","text":"<pre><code>invoice_status: Literal[\"no\", \"to invoice\", \"invoiced\", \"upselling\"]\n</code></pre> <p>The current invoicing status of this sale order.</p> <p>Values:</p> <ul> <li><code>no</code> - Nothing to invoice</li> <li><code>to invoice</code> - Has line items that need to be invoiced</li> <li><code>invoiced</code> - Fully invoiced</li> <li><code>upselling</code> - Upselling opportunity</li> </ul>"},{"location":"managers/sale-order.html#name","title":"<code>name</code>","text":"<pre><code>name: str\n</code></pre> <p>The name assigned to the sale order.</p>"},{"location":"managers/sale-order.html#note","title":"<code>note</code>","text":"<pre><code>note: str\n</code></pre> <p>A note attached to the sale order.</p> <p>Generally used for terms and conditions.</p>"},{"location":"managers/sale-order.html#order_line_ids","title":"<code>order_line_ids</code>","text":"<pre><code>order_line_ids: list[int]\n</code></pre> <p>A list of IDs for the lines added to the sale order.</p>"},{"location":"managers/sale-order.html#order_line","title":"<code>order_line</code>","text":"<pre><code>order_line: list[SaleOrderLine]\n</code></pre> <p>The lines added to the sale order.</p> <p>This fetches the full records from Odoo once, and caches them for subsequent accesses.</p>"},{"location":"managers/sale-order.html#order_lines","title":"<code>order_lines</code>","text":"<pre><code>order_lines: list[SaleOrderLine]\n</code></pre> <p>An alias for <code>order_line</code>.</p>"},{"location":"managers/sale-order.html#os_invoice_date","title":"<code>os_invoice_date</code>","text":"<pre><code>os_invoice_date: date\n</code></pre> <p>The invoicing date for the invoice that is created from the sale order.</p>"},{"location":"managers/sale-order.html#os_invoice_due_date","title":"<code>os_invoice_due_date</code>","text":"<pre><code>os_invoice_due_date: date\n</code></pre> <p>The due date for the invoice that is created from the sale order.</p>"},{"location":"managers/sale-order.html#os_project_id","title":"<code>os_project_id</code>","text":"<pre><code>os_project_id: int | None\n</code></pre> <p>The ID for the the OpenStack project this sale order was was generated for.</p>"},{"location":"managers/sale-order.html#os_project_name","title":"<code>os_project_name</code>","text":"<pre><code>os_project_name: str | None\n</code></pre> <p>The name of the the OpenStack project this sale order was was generated for.</p>"},{"location":"managers/sale-order.html#os_project","title":"<code>os_project</code>","text":"<pre><code>os_project: Project | None\n</code></pre> <p>The OpenStack project this sale order was was generated for.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/sale-order.html#partner_id","title":"<code>partner_id</code>","text":"<pre><code>partner_id: int\n</code></pre> <p>The ID for the recipient partner for the sale order.</p>"},{"location":"managers/sale-order.html#partner_name","title":"<code>partner_name</code>","text":"<pre><code>partner_name: str\n</code></pre> <p>The name of the recipient partner for the sale order.</p>"},{"location":"managers/sale-order.html#partner","title":"<code>partner</code>","text":"<pre><code>partner: Partner\n</code></pre> <p>The recipient partner for the sale order.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/sale-order.html#state","title":"<code>state</code>","text":"<pre><code>state: Literal[\"draft\", \"sale\", \"done\", \"cancel\"]\n</code></pre> <p>State of the sale order.</p> <p>Values:</p> <ul> <li><code>draft</code> - Draft sale order (quotation), can still be modified</li> <li><code>sale</code> - Finalised sale order, cannot be modified</li> <li><code>done</code> - Finalised and settled sale order, cannot be modified</li> <li><code>cancel</code> - Cancelled sale order, can be deleted in most cases</li> </ul>"},{"location":"managers/sale-order.html#action_confirm_1","title":"<code>action_confirm</code>","text":"<pre><code>action_confirm() -&gt; None\n</code></pre> <p>Confirm this sale order.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; sale_order = odoo_client.sale_orders.get(1234)\n&gt;&gt;&gt; sale_order.action_confirm()\n</code></pre>"},{"location":"managers/sale-order.html#create_invoices_1","title":"<code>create_invoices</code>","text":"<pre><code>create_invoices() -&gt; None\n</code></pre> <p>Create invoices from this sale order.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; sale_order = odoo_client.sale_orders.get(1234)\n&gt;&gt;&gt; sale_order.create_invoices()\n</code></pre>"},{"location":"managers/support-subscription-type.html","title":"OpenStack Support Subscription Types","text":"<p>This page documents how to use the manager and record objects for support subscription types.</p>"},{"location":"managers/support-subscription-type.html#details","title":"Details","text":"Name Value Odoo Modules OpenStack Integration Odoo Model Name <code>openstack.support_subscription.type</code> Manager <code>support_subscription_types</code> Record Type <code>SupportSubscriptionType</code>"},{"location":"managers/support-subscription-type.html#manager","title":"Manager","text":"<p>The support subscription type manager is available as the <code>support_subscription_types</code> attribute on the Odoo client object.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.support_subscription_types.get(1234)\nSupportSubscriptionType(record={'id': 1234, ...}, fields=None)\n</code></pre> <p>For more information on how to use managers, refer to Managers.</p>"},{"location":"managers/support-subscription-type.html#record","title":"Record","text":"<p>The support subscription type manager returns <code>SupportSubscriptionType</code> record objects.</p> <p>To import the record class for type hinting purposes:</p> <pre><code>from openstack_odooclient import SupportSubscriptionType\n</code></pre> <p>The record class currently implements the following fields and methods.</p> <p>For more information on attributes and methods common to all record types, see Record Attributes and Methods.</p>"},{"location":"managers/support-subscription-type.html#billing_type","title":"<code>billing_type</code>","text":"<pre><code>billing_type: Literal[\"paid\", \"complimentary\"]\n</code></pre> <p>The type of support subscription.</p> <p>Values:</p> <ul> <li><code>paid</code> - Charge the subscription independently</li> <li><code>complimentary</code> - Bundled with a contract that includes the charge</li> </ul>"},{"location":"managers/support-subscription-type.html#name","title":"<code>name</code>","text":"<p><pre><code>name: str\n</code></pre> The name of the support subscription type.</p>"},{"location":"managers/support-subscription-type.html#product_id","title":"<code>product_id</code>","text":"<pre><code>product_id: int\n</code></pre> <p>The ID for the product to use to invoice the support subscription.</p>"},{"location":"managers/support-subscription-type.html#product_name","title":"<code>product_name</code>","text":"<pre><code>product_name: str\n</code></pre> <p>The name of the product to use to invoice the support subscription.</p>"},{"location":"managers/support-subscription-type.html#product","title":"<code>product</code>","text":"<pre><code>product: Product\n</code></pre> <p>The product to use to invoice the support subscription.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/support-subscription-type.html#usage_percent","title":"<code>usage_percent</code>","text":"<pre><code>usage_percent: float\n</code></pre> <p>Percentage of usage compared to price (0-100).</p>"},{"location":"managers/support-subscription-type.html#support_subscription_ids","title":"<code>support_subscription_ids</code>","text":"<pre><code>support_subscription_ids: list[int]\n</code></pre> <p>A list of IDs for the support subscriptions of this type.</p>"},{"location":"managers/support-subscription-type.html#support_subscription","title":"<code>support_subscription</code>","text":"<pre><code>support_subscription: list[SupportSubscription]\n</code></pre> <p>The list of support subscriptions of this type.</p> <p>This fetches the full records from Odoo once, and caches them for subsequent accesses.</p>"},{"location":"managers/support-subscription-type.html#support_subscriptions","title":"<code>support_subscriptions</code>","text":"<pre><code>support_subscriptions: list[SupportSubscription]\n</code></pre> <p>An alias for <code>support_subscription</code>.</p>"},{"location":"managers/support-subscription.html","title":"OpenStack Support Subscriptions","text":"<p>This page documents how to use the manager and record objects for support subscriptions.</p>"},{"location":"managers/support-subscription.html#details","title":"Details","text":"Name Value Odoo Modules OpenStack Integration Odoo Model Name <code>openstack.support_subscription</code> Manager <code>support_subscriptions</code> Record Type <code>SupportSubscription</code>"},{"location":"managers/support-subscription.html#manager","title":"Manager","text":"<p>The support subscription manager is available as the <code>support_subscriptions</code> attribute on the Odoo client object.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.support_subscriptions.get(1234)\nSupportSubscription(record={'id': 1234, ...}, fields=None)\n</code></pre> <p>For more information on how to use managers, refer to Managers.</p>"},{"location":"managers/support-subscription.html#record","title":"Record","text":"<p>The support subscription manager returns <code>SupportSubscription</code> record objects.</p> <p>To import the record class for type hinting purposes:</p> <pre><code>from openstack_odooclient import SupportSubscription\n</code></pre> <p>The record class currently implements the following fields and methods.</p> <p>For more information on attributes and methods common to all record types, see Record Attributes and Methods.</p>"},{"location":"managers/support-subscription.html#billing_type","title":"<code>billing_type</code>","text":"<pre><code>billing_type: Literal[\"paid\", \"complimentary\"]\n</code></pre> <p>The method of billing for the support subscription.</p> <p>Values:</p> <ul> <li><code>paid</code> - Charge the subscription independently</li> <li><code>complimentary</code> - Bundled with a contract that includes the charge</li> </ul>"},{"location":"managers/support-subscription.html#end_date","title":"<code>end_date</code>","text":"<pre><code>end_date: date\n</code></pre> <p>The end date of the credit.</p>"},{"location":"managers/support-subscription.html#partner_id","title":"<code>partner_id</code>","text":"<pre><code>partner_id: int | None\n</code></pre> <p>The ID for the partner linked to this support subscription, if it is linked to a partner.</p> <p>Support subscriptions linked to a partner cover all projects the partner owns.</p>"},{"location":"managers/support-subscription.html#partner_name","title":"<code>partner_name</code>","text":"<pre><code>partner_name: str | None\n</code></pre> <p>The name of the partner linked to this support subscription, if it is linked to a partner.</p> <p>Support subscriptions linked to a partner cover all projects the partner owns.</p>"},{"location":"managers/support-subscription.html#partner","title":"<code>partner</code>","text":"<pre><code>partner: Partner | None\n</code></pre> <p>The partner linked to this support subscription, if it is linked to a partner.</p> <p>Support subscriptions linked to a partner cover all projects the partner owns.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/support-subscription.html#project_id","title":"<code>project_id</code>","text":"<pre><code>project_id: int | None\n</code></pre> <p>The ID of the project this support subscription is for, if it is linked to a specific project.</p>"},{"location":"managers/support-subscription.html#project_name","title":"<code>project_name</code>","text":"<pre><code>project_name: str | None\n</code></pre> <p>The name of the project this support subscription is for, if it is linked to a specific project.</p>"},{"location":"managers/support-subscription.html#project","title":"<code>project</code>","text":"<pre><code>project: Project | None\n</code></pre> <p>The project this support subscription is for, if it is linked to a specific project.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/support-subscription.html#start_date","title":"<code>start_date</code>","text":"<pre><code>start_date: date\n</code></pre> <p>The start date of the credit.</p>"},{"location":"managers/support-subscription.html#support_subscription_type_id","title":"<code>support_subscription_type_id</code>","text":"<pre><code>support_subscription_type_id: int\n</code></pre> <p>The ID of the type of the support subscription.</p>"},{"location":"managers/support-subscription.html#support_subscription_type_name","title":"<code>support_subscription_type_name</code>","text":"<pre><code>support_subscription_type_name: str\n</code></pre> <p>The name of the type of the support subscription.</p>"},{"location":"managers/support-subscription.html#support_subscription_type","title":"<code>support_subscription_type</code>","text":"<pre><code>support_subscription_type: SupportSubscriptionType\n</code></pre> <p>The type of the support subscription.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/tax-group.html","title":"Tax Groups","text":"<p>This page documents how to use the manager and record objects for tax groups.</p>"},{"location":"managers/tax-group.html#details","title":"Details","text":"Name Value Odoo Modules Accounting Odoo Model Name <code>account.tax.group</code> Manager <code>tax_groups</code> Record Type <code>TaxGroup</code>"},{"location":"managers/tax-group.html#manager","title":"Manager","text":"<p>The tax group manager is available as the <code>tax_groups</code> attribute on the Odoo client object.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.tax_groups.get(1234)\nTaxGroup(record={'id': 1234, ...}, fields=None)\n</code></pre> <p>For more information on how to use managers, refer to Managers.</p>"},{"location":"managers/tax-group.html#record","title":"Record","text":"<p>The tax group manager returns <code>TaxGroup</code> record objects.</p> <p>To import the record class for type hinting purposes:</p> <pre><code>from openstack_odooclient import TaxGroup\n</code></pre> <p>The record class currently implements the following fields and methods.</p> <p>For more information on attributes and methods common to all record types, see Record Attributes and Methods.</p>"},{"location":"managers/tax-group.html#name","title":"<code>name</code>","text":"<pre><code>name: str\n</code></pre> <p>Name of the tax group.</p>"},{"location":"managers/tax.html","title":"Taxes","text":"<p>This page documents how to use the manager and record objects for taxes.</p>"},{"location":"managers/tax.html#details","title":"Details","text":"Name Value Odoo Modules Accounting Odoo Model Name <code>account.tax</code> Manager <code>taxes</code> Record Type <code>Tax</code>"},{"location":"managers/tax.html#manager","title":"Manager","text":"<p>The tax manager is available as the <code>taxes</code> attribute on the Odoo client object.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.taxes.get(1234)\nTax(record={'id': 1234, ...}, fields=None)\n</code></pre> <p>For more information on how to use managers, refer to Managers.</p>"},{"location":"managers/tax.html#record","title":"Record","text":"<p>The tax manager returns <code>Tax</code> record objects.</p> <p>To import the record class for type hinting purposes:</p> <pre><code>from openstack_odooclient import Tax\n</code></pre> <p>The record class currently implements the following fields and methods.</p> <p>For more information on attributes and methods common to all record types, see Record Attributes and Methods.</p>"},{"location":"managers/tax.html#active","title":"<code>active</code>","text":"<pre><code>active: bool\n</code></pre> <p>Whether or not this tax is active (enabled).</p>"},{"location":"managers/tax.html#amount","title":"<code>amount</code>","text":"<pre><code>amount: float\n</code></pre> <p>The amount of tax to apply.</p>"},{"location":"managers/tax.html#amount_type","title":"<code>amount_type</code>","text":"<pre><code>amount_type: Literal[\"group\", \"fixed\", \"percent\", \"division\"]\n</code></pre> <p>The method that should be used to tax invoices.</p> <p>Values:</p> <ul> <li><code>group</code> - Group of Taxes</li> <li><code>fixed</code> - Fixed</li> <li><code>percent</code> - Percentage of Price</li> <li><code>division</code> - Percentage of Price Tax Included</li> </ul>"},{"location":"managers/tax.html#analytic","title":"<code>analytic</code>","text":"<pre><code>analytic: bool\n</code></pre> <p>When set to <code>True</code>, the amount computed by this tax will be assigned to the same analytic account as the invoice line (if any).</p>"},{"location":"managers/tax.html#company_id","title":"<code>company_id</code>","text":"<pre><code>company_id: int\n</code></pre> <p>The ID for the company this tax is owned by.</p>"},{"location":"managers/tax.html#company_name","title":"<code>company_name</code>","text":"<pre><code>company_name: str\n</code></pre> <p>The name of the company this tax is owned by.</p>"},{"location":"managers/tax.html#company","title":"<code>company</code>","text":"<pre><code>company: Company\n</code></pre> <p>The company this tax is owned by.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/tax.html#country_code","title":"<code>country_code</code>","text":"<pre><code>country_code: str\n</code></pre> <p>The country code for this tax.</p>"},{"location":"managers/tax.html#description","title":"<code>description</code>","text":"<pre><code>description: str\n</code></pre> <p>The label for this tax on invoices.</p>"},{"location":"managers/tax.html#include_base_amount","title":"<code>include_base_amount</code>","text":"<pre><code>include_base_amount: bool\n</code></pre> <p>When set to <code>True</code>, taxes included after this one will be calculated based on the price with this tax included.</p>"},{"location":"managers/tax.html#name","title":"<code>name</code>","text":"<pre><code>name: str\n</code></pre> <p>Name of the tax.</p>"},{"location":"managers/tax.html#price_include","title":"<code>price_include</code>","text":"<pre><code>price_include: bool\n</code></pre> <p>Whether or not prices included in invoices should include this tax.</p>"},{"location":"managers/tax.html#tax_eligibility","title":"<code>tax_eligibility</code>","text":"<pre><code>tax_eligibility: Literal[\"on_invoice\", \"on_payment\"]\n</code></pre> <p>When the tax is due for the invoice.</p> <p>Values:</p> <ul> <li><code>on_invoice</code> - Due as soon as the invoice is validated</li> <li><code>on_payment</code> - Due as soon as payment of the invoice is received</li> </ul>"},{"location":"managers/tax.html#tax_group_id","title":"<code>tax_group_id</code>","text":"<pre><code>tax_group_id: int\n</code></pre> <p>The ID for the tax group this tax is categorised under.</p>"},{"location":"managers/tax.html#tax_group_name","title":"<code>tax_group_name</code>","text":"<pre><code>tax_group_name: str\n</code></pre> <p>The name of the tax group this tax is categorised under.</p>"},{"location":"managers/tax.html#tax_group","title":"<code>tax_group</code>","text":"<pre><code>tax_group: TaxGroup\n</code></pre> <p>The tax group this tax is categorised under.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/term-discount.html","title":"OpenStack Term Discounts","text":"<p>This page documents how to use the manager and record objects for term discounts.</p>"},{"location":"managers/term-discount.html#details","title":"Details","text":"Name Value Odoo Modules OpenStack Integration Odoo Model Name <code>openstack.term_discount</code> Manager <code>term_discounts</code> Record Type <code>TermDiscount</code>"},{"location":"managers/term-discount.html#manager","title":"Manager","text":"<p>The term discount manager is available as the <code>term_discounts</code> attribute on the Odoo client object.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.term_discounts.get(1234)\nTermDiscount(record={'id': 1234, ...}, fields=None)\n</code></pre> <p>For more information on how to use managers, refer to Managers.</p>"},{"location":"managers/term-discount.html#record","title":"Record","text":"<p>The term discount manager returns <code>TermDiscount</code> record objects.</p> <p>To import the record class for type hinting purposes:</p> <pre><code>from openstack_odooclient import TermDiscount\n</code></pre> <p>The record class currently implements the following fields and methods.</p> <p>For more information on attributes and methods common to all record types, see Record Attributes and Methods.</p>"},{"location":"managers/term-discount.html#discount_percent","title":"<code>discount_percent</code>","text":"<pre><code>discount_percent: float\n</code></pre> <p>The maximum discount percentage for this term discount (0-100).</p>"},{"location":"managers/term-discount.html#early_termination_date","title":"<code>early_termination_date</code>","text":"<pre><code>early_termination_date: date | None\n</code></pre> <p>An optional early termination date for the term discount.</p>"},{"location":"managers/term-discount.html#end_date","title":"<code>end_date</code>","text":"<pre><code>end_date: date\n</code></pre> <p>The date that the term discount expires on.</p>"},{"location":"managers/term-discount.html#min_commit","title":"<code>min_commit</code>","text":"<pre><code>min_commit: float\n</code></pre> <p>The minimum commitment for this term discount to apply.</p>"},{"location":"managers/term-discount.html#partner_id","title":"<code>partner_id</code>","text":"<pre><code>partner_id: int\n</code></pre> <p>The ID for the partner that receives this term discount.</p>"},{"location":"managers/term-discount.html#partner_name","title":"<code>partner_name</code>","text":"<pre><code>partner_name: str\n</code></pre> <p>The name of the partner that receives this term discount.</p>"},{"location":"managers/term-discount.html#partner","title":"<code>partner</code>","text":"<pre><code>partner: Partner\n</code></pre> <p>The partner that receives this term discount.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/term-discount.html#project_id","title":"<code>project_id</code>","text":"<pre><code>project_id: int | None\n</code></pre> <p>The ID for the project this term discount applies to, if it is a project-specific term discount.</p> <p>If not set, the term discount applies to all projects the partner owns.</p>"},{"location":"managers/term-discount.html#project_name","title":"<code>project_name</code>","text":"<pre><code>project_name: str | None\n</code></pre> <p>The name of the project this term discount applies to, if it is a project-specific term discount.</p> <p>If not set, the term discount applies to all projects the partner owns.</p>"},{"location":"managers/term-discount.html#project","title":"<code>project</code>","text":"<pre><code>project: Project | None\n</code></pre> <p>The project this term discount applies to, if it is a project-specific term discount.</p> <p>If not set, the term discount applies to all projects the partner owns.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/term-discount.html#start_date","title":"<code>start_date</code>","text":"<pre><code>start_date: date\n</code></pre> <p>The date from which this term discount starts.</p>"},{"location":"managers/term-discount.html#superseded_by_id","title":"<code>superseded_by_id</code>","text":"<pre><code>superseded_by_id: int | None\n</code></pre> <p>The ID for the term discount that supersedes this one, if superseded.</p>"},{"location":"managers/term-discount.html#superseded_by_name","title":"<code>superseded_by_name</code>","text":"<pre><code>superseded_by_name: str | None\n</code></pre> <p>The name of the term discount that supersedes this one, if superseded.</p>"},{"location":"managers/term-discount.html#superseded_by","title":"<code>superseded_by</code>","text":"<pre><code>superseded_by: TermDiscount | None\n</code></pre> <p>The term discount that supersedes this one, if superseded.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/trial.html","title":"OpenStack Trials","text":"<p>This page documents how to use the manager and record objects for trials.</p>"},{"location":"managers/trial.html#details","title":"Details","text":"Name Value Odoo Modules OpenStack Integration Odoo Model Name <code>openstack.trial</code> Manager <code>trials</code> Record Type <code>Trial</code>"},{"location":"managers/trial.html#manager","title":"Manager","text":"<p>The trial manager is available as the <code>trials</code> attribute on the Odoo client object.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.trials.get(1234)\nTrial(record={'id': 1234, ...}, fields=None)\n</code></pre> <p>For more information on how to use managers, refer to Managers.</p>"},{"location":"managers/trial.html#record","title":"Record","text":"<p>The trial manager returns <code>Trial</code> record objects.</p> <p>To import the record class for type hinting purposes:</p> <pre><code>from openstack_odooclient import Trial\n</code></pre> <p>The record class currently implements the following fields and methods.</p> <p>For more information on attributes and methods common to all record types, see Record Attributes and Methods.</p>"},{"location":"managers/trial.html#account_suspended_date","title":"<code>account_suspended_date</code>","text":"<pre><code>account_suspended_date: date | Literal[False]\n</code></pre> <p>The date the account was suspended, following the end of the trial.</p>"},{"location":"managers/trial.html#account_terminated_date","title":"<code>account_terminated_date</code>","text":"<pre><code>account_terminated_date: date | Literal[False]\n</code></pre> <p>The date the account was terminated, following the end of the trial.</p>"},{"location":"managers/trial.html#account_upgraded_date","title":"<code>account_upgraded_date</code>","text":"<pre><code>account_upgraded_date: date | Literal[False]\n</code></pre> <p>The date the account was upgraded to a full account, following the end of the trial.</p>"},{"location":"managers/trial.html#end_date","title":"<code>end_date</code>","text":"<pre><code>end_date: date\n</code></pre> <p>The end date of this trial.</p>"},{"location":"managers/trial.html#partner_id","title":"<code>partner_id</code>","text":"<pre><code>partner_id: int\n</code></pre> <p>The ID for the target partner for this trial.</p>"},{"location":"managers/trial.html#partner_name","title":"<code>partner_name</code>","text":"<pre><code>partner_name: str\n</code></pre> <p>The name of the target partner for this trial.</p>"},{"location":"managers/trial.html#partner","title":"<code>partner</code>","text":"<pre><code>partner: Partner\n</code></pre> <p>The target partner for this trial.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/trial.html#start_date","title":"<code>start_date</code>","text":"<pre><code>start_date: date\n</code></pre> <p>The start date of this trial.</p>"},{"location":"managers/uom-category.html","title":"Unit of Measure (UoM) Categories","text":"<p>This page documents how to use the manager and record objects for Unit of Measure (UoM) categories.</p>"},{"location":"managers/uom-category.html#details","title":"Details","text":"Name Value Odoo Modules Units of Measure (UoM) Odoo Model Name <code>uom.uom.category</code> Manager <code>uom_categories</code> Record Type <code>UomCategory</code>"},{"location":"managers/uom-category.html#manager","title":"Manager","text":"<p>The Unit of Measure (UoM) category manager is available as the <code>uom_categories</code> attribute on the Odoo client object.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.uom_categories.get(1234)\nUomCategory(record={'id': 1234, ...}, fields=None)\n</code></pre> <p>For more information on how to use managers, refer to Managers.</p>"},{"location":"managers/uom-category.html#record","title":"Record","text":"<p>The Unit of Measure (UoM) category manager returns <code>UomCategory</code> record objects.</p> <p>To import the record class for type hinting purposes:</p> <pre><code>from openstack_odooclient import UomCategory\n</code></pre> <p>The record class currently implements the following fields and methods.</p> <p>For more information on attributes and methods common to all record types, see Record Attributes and Methods.</p>"},{"location":"managers/uom-category.html#measure_type","title":"<code>measure_type</code>","text":"<pre><code>measure_type: Literal[\n    \"unit\",\n    \"weight\",\n    \"working_time\",\n    \"length\",\n    \"volume\",\n]\n</code></pre> <p>The type of Unit of Measure (UoM) category.</p> <p>This field no longer exists from Odoo 14 onwards.</p> <p>Values:</p> <ul> <li><code>unit</code> - Default Units</li> <li><code>weight</code> - Default Weight</li> <li><code>working_time</code> - Default Working Time</li> <li><code>length</code> - Default Length</li> <li><code>volume</code> - Default Volume</li> </ul>"},{"location":"managers/uom-category.html#name","title":"<code>name</code>","text":"<pre><code>name: str\n</code></pre> <p>The name of the Unit of Measure (UoM) category.</p>"},{"location":"managers/uom.html","title":"Units of Measure (UoM)","text":"<p>This page documents how to use the manager and record objects for Units of Measure (UoM).</p>"},{"location":"managers/uom.html#details","title":"Details","text":"Name Value Odoo Modules Units of Measure (UoM), Product Odoo Model Name <code>uom.uom</code> Manager <code>uoms</code> Record Type <code>Uom</code>"},{"location":"managers/uom.html#manager","title":"Manager","text":"<p>The Unit of Measure (UoM) manager is available as the <code>uoms</code> attribute on the Odoo client object.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.uoms.get(1234)\nUom(record={'id': 1234, ...}, fields=None)\n</code></pre> <p>For more information on how to use managers, refer to Managers.</p>"},{"location":"managers/uom.html#record","title":"Record","text":"<p>The Unit of Measure (UoM) manager returns <code>Uom</code> record objects.</p> <p>To import the record class for type hinting purposes:</p> <pre><code>from openstack_odooclient import Uom\n</code></pre> <p>The record class currently implements the following fields and methods.</p> <p>For more information on attributes and methods common to all record types, see Record Attributes and Methods.</p>"},{"location":"managers/uom.html#active","title":"<code>active</code>","text":"<pre><code>active: bool\n</code></pre> <p>Whether or not this Unit of Measure is active (enabled).</p>"},{"location":"managers/uom.html#category_id","title":"<code>category_id</code>","text":"<pre><code>category_id: int\n</code></pre> <p>The ID for the category this Unit of Measure is classified as.</p>"},{"location":"managers/uom.html#category_name","title":"<code>category_name</code>","text":"<pre><code>category_name: str\n</code></pre> <p>The name of the category this Unit of Measure is classified as.</p>"},{"location":"managers/uom.html#category","title":"<code>category</code>","text":"<pre><code>category: UomCategory\n</code></pre> <p>The category this Unit of Measure is classified as.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/uom.html#factor","title":"<code>factor</code>","text":"<pre><code>factor: float\n</code></pre> <p>How much bigger or smaller this unit is compared to the reference Unit of Measure (UoM) for the classified category.</p>"},{"location":"managers/uom.html#factor_inv","title":"<code>factor_inv</code>","text":"<pre><code>factor_inv: float\n</code></pre> <p>How many times this Unit of Measure is bigger than the reference Unit of Measure (UoM) for the classified category.</p>"},{"location":"managers/uom.html#measure_type","title":"<code>measure_type</code>","text":"<pre><code>measure_type: Literal[\n    \"unit\",\n    \"weight\",\n    \"working_time\",\n    \"length\",\n    \"volume\",\n]\n</code></pre> <p>The type of category this Unit of Measure (UoM) is classified as.</p> <p>This field no longer exists from Odoo 14 onwards.</p> <p>Values:</p> <ul> <li><code>unit</code> - Default Units</li> <li><code>weight</code> - Default Weight</li> <li><code>working_time</code> - Default Working Time</li> <li><code>length</code> - Default Length</li> <li><code>volume</code> - Default Volume</li> </ul>"},{"location":"managers/uom.html#name","title":"<code>name</code>","text":"<pre><code>name: str\n</code></pre> <p>Unit of Measure (UoM) name.</p>"},{"location":"managers/uom.html#uom_type","title":"<code>uom_type</code>","text":"<pre><code>uom_type: Literal[\"bigger\", \"reference\", \"smaller\"]\n</code></pre> <p>The type of the Unit of Measure (UoM).</p> <p>This determines its relationship with other UoMs in the same category.</p> <p>Values:</p> <ul> <li><code>bigger</code> - Bigger than the reference Unit of Measure</li> <li><code>reference</code> - Reference Unit of Measure for the selected category</li> <li><code>smaller</code> - Smaller than the reference Unit of Measure</li> </ul>"},{"location":"managers/user.html","title":"Users","text":"<p>This page documents how to use the manager and record objects for users.</p>"},{"location":"managers/user.html#details","title":"Details","text":"Name Value Odoo Modules Base, Accounting Odoo Model Name <code>res.users</code> Manager <code>users</code> Record Type <code>User</code>"},{"location":"managers/user.html#manager","title":"Manager","text":"<p>The user manager is available as the <code>users</code> attribute on the Odoo client object.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.users.get(1234)\nUser(record={'id': 1234, ...}, fields=None)\n</code></pre> <p>For more information on how to use managers, refer to Managers.</p>"},{"location":"managers/user.html#record","title":"Record","text":"<p>The user manager returns <code>User</code> record objects.</p> <p>To import the record class for type hinting purposes:</p> <pre><code>from openstack_odooclient import User\n</code></pre> <p>The record class currently implements the following fields and methods.</p> <p>For more information on attributes and methods common to all record types, see Record Attributes and Methods.</p>"},{"location":"managers/user.html#active","title":"<code>active</code>","text":"<pre><code>active: bool\n</code></pre> <p>Whether or not this user is active (enabled).</p>"},{"location":"managers/user.html#active_partner","title":"<code>active_partner</code>","text":"<pre><code>active_partner: bool\n</code></pre> <p>Whether or not the partner this user is associated with is active.</p>"},{"location":"managers/user.html#company_id","title":"<code>company_id</code>","text":"<pre><code>company_id: int\n</code></pre> <p>The ID for the default company this user is logged in as.</p>"},{"location":"managers/user.html#company_name","title":"<code>company_name</code>","text":"<pre><code>company_name: str\n</code></pre> <p>The name of the default company this user is logged in as.</p>"},{"location":"managers/user.html#company","title":"<code>company</code>","text":"<pre><code>company: Company\n</code></pre> <p>The default company this user is logged in as.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/user.html#name","title":"<code>name</code>","text":"<pre><code>name: str\n</code></pre> <p>User name.</p>"},{"location":"managers/user.html#partner_id","title":"<code>partner_id</code>","text":"<pre><code>partner_id: int\n</code></pre> <p>The ID for the partner that this user is associated with.</p>"},{"location":"managers/user.html#partner_name","title":"<code>partner_name</code>","text":"<pre><code>partner_name: str\n</code></pre> <p>The name of the partner that this user is associated with.</p>"},{"location":"managers/user.html#partner","title":"<code>partner</code>","text":"<pre><code>partner: Partner\n</code></pre> <p>The partner that this user is associated with.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/volume-discount-range.html","title":"OpenStack Volume Discount Ranges","text":"<p>This page documents how to use the manager and record objects for volume discount ranges.</p>"},{"location":"managers/volume-discount-range.html#details","title":"Details","text":"Name Value Odoo Modules OpenStack Integration Odoo Model Name <code>openstack.volume_discount_range</code> Manager <code>volume_discount_ranges</code> Record Type <code>VolumeDiscountRange</code>"},{"location":"managers/volume-discount-range.html#manager","title":"Manager","text":"<p>The volume discount range manager is available as the <code>volume_discount_ranges</code> attribute on the Odoo client object.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.volume_discount_ranges.get(1234)\nVolumeDiscountRange(record={'id': 1234, ...}, fields=None)\n</code></pre> <p>For more information on how to use managers, refer to Managers.</p> <p>The following manager methods are also available, in addition to the standard methods.</p>"},{"location":"managers/volume-discount-range.html#get_for_charge","title":"<code>get_for_charge</code>","text":"<pre><code>get_for_charge(\n    charge: float,\n    customer_group: int | CustomerGroup | None = None,\n) -&gt; VolumeDiscountRange | None\n</code></pre> <p>Return the volume discount range to apply to a given charge.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.volume_discount_ranges.get_for_charge(1000)\nVolumeDiscountRange(record={'id': 1234, 'min': 500, ...}, fields=None)\n</code></pre> <p>If <code>customer_group</code> is supplied, volume discount ranges for a specific customer group are returned. When set to <code>None</code> (the default), volume discount ranges for all customers are returned.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.volume_discount_ranges.get_for_charge(1000, customer_group=5678)\nVolumeDiscountRange(record={'id': 9012, 'customer_group': [5678, 'Customer Group'], 'min': 500, ...}, fields=None)\n</code></pre> <p>If multiple volume discount ranges can be applied, the range with the highest discount percentage is selected. If no applicable volume discount ranges were found, <code>None</code> is returned.</p>"},{"location":"managers/volume-discount-range.html#parameters","title":"Parameters","text":"Name Type Description Default <code>charge</code> <code>float</code> The charge to find the applicable discount range for (required) <code>customer_group</code> <code>int | CustomerGroup | None</code> Get discount for a specific customer group (ID or object) <code>None</code>"},{"location":"managers/volume-discount-range.html#returns","title":"Returns","text":"Type Description <code>VolumeDiscountRange</code> Highest percentage applicable volume discount range (if found) <code>None</code> If no applicable volume discount range was found"},{"location":"managers/volume-discount-range.html#record","title":"Record","text":"<p>The volume discount range manager returns <code>VolumeDiscountRange</code> record objects.</p> <p>To import the record class for type hinting purposes:</p> <pre><code>from openstack_odooclient import VolumeDiscountRange\n</code></pre> <p>The record class currently implements the following fields and methods.</p> <p>For more information on attributes and methods common to all record types, see Record Attributes and Methods.</p>"},{"location":"managers/volume-discount-range.html#customer_group_id","title":"<code>customer_group_id</code>","text":"<pre><code>customer_group_id: int | None\n</code></pre> <p>The ID for the customer group this volume discount range applies to, if a specific customer group is set.</p> <p>If no customer group is set, this volume discount range applies to all customers.</p>"},{"location":"managers/volume-discount-range.html#customer_group_name","title":"<code>customer_group_name</code>","text":"<pre><code>customer_group_name: str | None\n</code></pre> <p>The name of the customer group this volume discount range applies to, if a specific customer group is set.</p> <p>If no customer group is set, this volume discount range applies to all customers.</p>"},{"location":"managers/volume-discount-range.html#customer_group","title":"<code>customer_group</code>","text":"<pre><code>customer_group: CustomerGroup | None\n</code></pre> <p>The customer group this volume discount range applies to, if a specific customer group is set.</p> <p>If no customer group is set, this volume discount range applies to all customers.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/volume-discount-range.html#discount_percent","title":"<code>discount_percent</code>","text":"<pre><code>discount_percent: float\n</code></pre> <p>Discount percentage of this volume discount range (0-100).</p>"},{"location":"managers/volume-discount-range.html#name","title":"<code>name</code>","text":"<pre><code>name: str\n</code></pre> <p>The automatically generated name (description) of this volume discount range.</p>"},{"location":"managers/volume-discount-range.html#max","title":"<code>max</code>","text":"<pre><code>max: float | None\n</code></pre> <p>Optional maximum charge for this volume discount range.</p> <p>Intended to be used when creating tiered volume discounts for customers.</p>"},{"location":"managers/volume-discount-range.html#min","title":"<code>min</code>","text":"<pre><code>min: float\n</code></pre> <p>Minimum charge for this volume discount range.</p>"},{"location":"managers/volume-discount-range.html#use_max","title":"<code>use_max</code>","text":"<pre><code>use_max: bool\n</code></pre> <p>Use the <code>max</code> field, if defined.</p>"},{"location":"managers/voucher-code.html","title":"OpenStack Voucher Codes","text":"<p>This page documents how to use the manager and record objects for voucher codes.</p>"},{"location":"managers/voucher-code.html#details","title":"Details","text":"Name Value Odoo Modules OpenStack Integration Odoo Model Name <code>openstack.voucher_code</code> Manager <code>voucher_codes</code> Record Type <code>VoucherCode</code>"},{"location":"managers/voucher-code.html#manager","title":"Manager","text":"<p>The voucher code manager is available as the <code>voucher_codes</code> attribute on the Odoo client object.</p> <pre><code>&gt;&gt;&gt; from openstack_odooclient import Client as OdooClient\n&gt;&gt;&gt; odoo_client = OdooClient(\n...     hostname=\"localhost\",\n...     port=8069,\n...     protocol=\"jsonrpc\",\n...     database=\"odoodb\",\n...     user=\"test-user\",\n...     password=\"&lt;password&gt;\",\n... )\n&gt;&gt;&gt; odoo_client.voucher_codes.get(1234)\nVoucherCode(record={'id': 1234, ...}, fields=None)\n</code></pre> <p>For more information on how to use managers, refer to Managers.</p>"},{"location":"managers/voucher-code.html#record","title":"Record","text":"<p>The voucher code manager returns <code>VoucherCode</code> record objects.</p> <p>To import the record class for type hinting purposes:</p> <pre><code>from openstack_odooclient import VoucherCode\n</code></pre> <p>The record class currently implements the following fields and methods.</p> <p>For more information on attributes and methods common to all record types, see Record Attributes and Methods.</p>"},{"location":"managers/voucher-code.html#claimed","title":"<code>claimed</code>","text":"<pre><code>claimed: bool\n</code></pre> <p>Whether or not this voucher code has been claimed.</p>"},{"location":"managers/voucher-code.html#code","title":"<code>code</code>","text":"<pre><code>code: str\n</code></pre> <p>The code string for this voucher code.</p>"},{"location":"managers/voucher-code.html#credit_amount","title":"<code>credit_amount</code>","text":"<pre><code>credit_amount: float | Literal[False]\n</code></pre> <p>The initial credit balance for the voucher code, if a credit is to be created by the voucher code.</p>"},{"location":"managers/voucher-code.html#credit_type_id","title":"<code>credit_type_id</code>","text":"<pre><code>credit_type_id: int | None\n</code></pre> <p>The ID of the credit type to use, if a credit is to be created by this voucher code.</p>"},{"location":"managers/voucher-code.html#credit_type_name","title":"<code>credit_type_name</code>","text":"<pre><code>credit_type_name: str | None\n</code></pre> <p>The name of the credit type to use, if a credit is to be created by this voucher code.</p>"},{"location":"managers/voucher-code.html#credit_type","title":"<code>credit_type</code>","text":"<pre><code>credit_type: CreditType | None\n</code></pre> <p>The credit type to use, if a credit is to be created by this voucher code.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/voucher-code.html#credit_duration","title":"<code>credit_duration</code>","text":"<pre><code>credit_duration: int | Literal[False]\n</code></pre> <p>The duration of the credit, in days, if a credit is to be created by the voucher code.</p>"},{"location":"managers/voucher-code.html#customer_group_id","title":"<code>customer_group_id</code>","text":"<pre><code>customer_group_id: int | None\n</code></pre> <p>The ID of the customer group to add the customer to, if set.</p>"},{"location":"managers/voucher-code.html#customer_group_name","title":"<code>customer_group_name</code>","text":"<pre><code>customer_group_name: str | None\n</code></pre> <p>The name of the customer group to add the customer to, if set.</p>"},{"location":"managers/voucher-code.html#customer_group","title":"<code>customer_group</code>","text":"<pre><code>customer_group: CustomerGroup | None\n</code></pre> <p>The customer group to add the customer to, if set.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/voucher-code.html#expiry_date","title":"<code>expiry_date</code>","text":"<pre><code>expiry_date: date | Literal[False]\n</code></pre> <p>The date the voucher code expires.</p>"},{"location":"managers/voucher-code.html#grant_duration","title":"<code>grant_duration</code>","text":"<pre><code>grant_duration: int | Literal[False]\n</code></pre> <p>The duration of the grant, in days, if a grant is to be created by the voucher code.</p>"},{"location":"managers/voucher-code.html#grant_type_id","title":"<code>grant_type_id</code>","text":"<pre><code>grant_type_id: int | None\n</code></pre> <p>The ID of the grant type to use, if a grant is to be created by this voucher code.</p>"},{"location":"managers/voucher-code.html#grant_type_name","title":"<code>grant_type_name</code>","text":"<pre><code>grant_type_name: str | None\n</code></pre> <p>The name of the grant type to use, if a grant is to be created by this voucher code.</p>"},{"location":"managers/voucher-code.html#grant_type","title":"<code>grant_type</code>","text":"<pre><code>grant_type: GrantType | None\n</code></pre> <p>The grant type to use, if a grant is to be created by this voucher code.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/voucher-code.html#grant_value","title":"<code>grant_value</code>","text":"<pre><code>grant_value: float | Literal[False]\n</code></pre> <p>The value of the grant, if a grant is to be created by the voucher code.</p>"},{"location":"managers/voucher-code.html#multi_use","title":"<code>multi_use</code>","text":"<pre><code>multi_use: bool\n</code></pre> <p>Whether or not this is a multi-use voucher code.</p> <p>A multi-use voucher code can be used an unlimited number of times until it expires.</p>"},{"location":"managers/voucher-code.html#name","title":"<code>name</code>","text":"<pre><code>name: str\n</code></pre> <p>The unique name of this voucher code.</p> <p>This uses the code specified in the record as-is.</p>"},{"location":"managers/voucher-code.html#quota_size","title":"<code>quota_size</code>","text":"<pre><code>quota_size: str | Literal[False]\n</code></pre> <p>The default quota size for new projects signed up using this voucher code.</p> <p>If unset, use the default quota size.</p>"},{"location":"managers/voucher-code.html#sales_person_id","title":"<code>sales_person_id</code>","text":"<pre><code>sales_person_id: int | None\n</code></pre> <p>The ID for the salesperson partner responsible for this voucher code, if assigned.</p>"},{"location":"managers/voucher-code.html#sales_person_name","title":"<code>sales_person_name</code>","text":"<pre><code>sales_person_name: str | None\n</code></pre> <p>The name of the salesperson partner responsible for this voucher code, if assigned.</p>"},{"location":"managers/voucher-code.html#sales_person","title":"<code>sales_person</code>","text":"<pre><code>sales_person: Partner | None\n</code></pre> <p>The salesperson partner responsible for this voucher code, if assigned.</p> <p>This fetches the full record from Odoo once, and caches it for subsequent accesses.</p>"},{"location":"managers/voucher-code.html#tag_ids","title":"<code>tag_ids</code>","text":"<pre><code>tag_ids: list[int]\n</code></pre> <p>A list of IDs for the tags (partner categories) to assign to partners for new accounts that signed up using this voucher code.</p>"},{"location":"managers/voucher-code.html#tags","title":"<code>tags</code>","text":"<pre><code>tags: list[PartnerCategory]\n</code></pre> <p>The list of tags (partner categories) to assign to partners for new accounts that signed up using this voucher code.</p> <p>This fetches the full records from Odoo once, and caches them for subsequent accesses.</p>"}]}